def AutoGrind01():
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.174,3.141592653589793,0.0,0.0])
  set_payload(2.0)
  step_count_a964f91a_3be8_4cc9_82cc_7a94a0d33625 = 0.0
  thread Step_Counter_Thread_e1b50495_5dd3_47fe_89c8_40dd7bd99d0b():
    while (True):
      step_count_a964f91a_3be8_4cc9_82cc_7a94a0d33625 = step_count_a964f91a_3be8_4cc9_82cc_7a94a0d33625 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_e1b50495_5dd3_47fe_89c8_40dd7bd99d0b()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  global up_pose_p=p[-.139608417870, -.431276583025, .128881236186, -.001221359682, 3.116276528482, .038891915637]
  global up_pose_q=[-1.6006999999532772, -1.5602662340053621, -2.0656244038598475, -1.1122093621336546, 1.5951000000012003, -0.030999999953279733]
  global down_pose_p=p[-.139608417867, -.431276582947, .015638902876, -.001221359682, 3.116276528482, .038891915637]
  global down_pose_q=[-1.6007000000057907, -1.7535815119226044, -2.215643614002417, -0.7688748740751139, 1.5950999999998547, -0.03100000000578973]
  global Vertical_3_p=p[-.139608417872, -.431276583102, .028138902829, -.001221359682, 3.116276528482, .038891915637]
  global Vertical_3_q=[-1.6006999999999998, -1.7271, -2.2029999999999994, -0.8079999999999998, 1.5951, -0.030999999999999694]
  global Tilted_1_p=p[-.139608417868, -.431276582996, .028138902982, -.011381173019, 3.019426224372, -.776094768972]
  global Tilted_1_q=[-1.6143181432207498, -1.730963551856462, -2.588173794846753, 0.1085536174237972, 1.6168206000396343, -0.039262279865630134]
  global Vertical_4_p=p[-.139608417866, -.431276582919, .131081236338, -.001221329928, 3.116276528722, .038891910429]
  global Vertical_4_q=[-1.600700000064136, -1.5575468977702354, -2.0619765024476475, -1.1185765962043455, 1.595100000182046, -0.030999980927620463]
  def AG_50():
    $ 84 "AG_50" "noBreak"
    $ 85 "MoveL"
    $ 86 "Vertical_3" "breakAfter"
    movel(Vertical_3_p, a=1.2, v=0.25)
    $ 87 "Tilted_1" "breakAfter"
    movel(Tilted_1_p, a=1.2, v=0.25)
    $ 88 "Vertical_4" "breakAfter"
    movel(Vertical_4_p, a=1.2, v=0.25)
    $ 89 "Vertical_3" "breakAfter"
    movel(Vertical_3_p, a=1.2, v=0.25)
  end
  $ 1 "BeforeStart"
  $ 2 "Script: agscript_util.script"
  # AutoGrind General UR Utilities
  # File: agscript_util.script
  # Version 1.0
  # Programmer: Ned Lecky
  
  # Send CRLF out the socket
  def socket_send_crlf():
    socket_send_byte(13)
    socket_send_byte(10)
  end
  
  # Send LF out the socket
  def socket_send_lf():
    socket_send_byte(10)
  end
  
  # New versions using built-in
  def AxisAngle_to_RPY(p0):
    r0 = [p0[3], p0[4], p0[5]]
    r1 = rotvec2rpy(r0)
    p1 = p[p0[0], p0[1], p0[2], r2d(r1[0]), r2d(r1[1]), r2d(r1[2])]
  
    return p1
  end
  
  def RPY_to_AxisAngle(p0):
    r0 = [d2r(p0[3]), d2r(p0[4]), d2r(p0[5])]
    r1 = rpy2rotvec(r0)
    p1 = p[p0[0], p0[1], p0[2], r1[0], r1[1], r1[2]]
  
    return p1
  end
  
  # Conversion (RPY(deg) to AxisAngle)
  def old_RPY_to_AxisAngle(R):
    Rx = d2r(R[3]) / 2.0
    Ry = d2r(R[4]) / 2.0
    Rz = d2r(R[5]) / 2.0
  
    Cx = cos(Rx)
    Sx = sin(Rx)
    Cy = cos(Ry)
    Sy = sin(Ry)
    Cz = cos(Rz)
    Sz = sin(Rz)
  
    Angle = 2.0 * acos(Cx * Cy * Cz + Sx * Sy * Sz)
    x = Sx * Cy * Cz - Cx * Sy * Sz
    y = Cx * Sy * Cz + Sx * Cy * Sz
    z = -Sx * Sy * Cz + Cx * Cy * Sz
    Norm = sqrt(x * x + y * y + z * z)
    if norm(Norm) < 1e-4:
      Ax = 0
      Ay = 0
      Az = 0
    else:
      Ratio = Angle / Norm
      Ax = x * Ratio
      Ay = y * Ratio
      Az = z * Ratio
    end
    Ans = p[R[0], R[1], R[2], Ax, Ay, Az]
  
    return Ans
  end
  
  # Conversion (AxisAngle to RPY)
  def old_AxisAngle_to_RPY(R):
    Rx = R[3]
    Ry = R[4]
    Rz = R[5]
  
    Angle = sqrt(Rx * Rx + Ry * Ry + Rz * Rz)
    if Angle < 1e-4:
      x = 0
      y = 0
      z = 1
    else:
      x = Rx / Angle
      y = Ry / Angle
      z = Rz / Angle
    end
    S = sin(Angle)
    C = cos(Angle)
    T = 1 - C
  
    r11 = T * x * x + C
    r12 = T * x * y - S * z
    r13 = T * x * z + S * y
    r21 = T * x * y + S * z
    r22 = T * y * y + C
    r23 = T * y * z - S * x
    r31 = T * x * z - S * y
    r32 = T * y * z + S * x
    r33 = T * z * z + C
  
    if r31 > 1:
      r31 = 1
    elif r31 < -1:
      r31 = -1
    end
  
    Ay = asin(-r31)
    if Ay > d2r(89.9):
      sinAxMinusAz = (r12 - r23) / (1 - r31)
      cosAxMinusAz = (r13 + r22) / (1 - r31)
      Ax = atan2(sinAxMinusAz, cosAxMinusAz)
      Az = 0
    elif Ay < d2r(-89.9):
      sinAxPlusAz = (-r12 - r23) / (1 + r31)
      cosAxPlusAz = (-r13 + r22) / (1 + r31)
      Ax = atan2(sinAxPlusAz, cosAxPlusAz)
      Az = 0
    else:
      Ax = atan2(r32, r33)
      Az = atan2(r21, r11)
    end
  
    Ans = p[R[0], R[1], R[2], r2d(Ax), r2d(Ay), r2d(Az)]
  
    return Ans
  end
  
  # Get position in RPY coordinate
  def get_actual_tcp_pose_RPY():
    p = get_actual_tcp_pose()
    p2 = AxisAngle_to_RPY(p)
    return p2
  end
  
  # movel in RPY coordinates
  def movel_RPY(p, accel, speed):
    p1 = RPY_to_AxisAngle(p)
    movel(p1, accel, speed)
  end
  
  # movej in RPY coordinates
  def movej_RPY(p, accel, speed):
    p1 = RPY_to_AxisAngle(p)
    movej(p1, accel, speed)
  end
  
  # Add position
  def pose_add_RPY(V1, V2):
    A0 = V1[0] + V2[0]
    A1 = V1[1] + V2[1]
    A2 = V1[2] + V2[2]
    A3 = V1[3] + V2[3]
    A4 = V1[4] + V2[4]
    A5 = V1[5] + V2[5]
    A = p[A0, A1, A2, A3, A4, A5]
  
    return A
  end
  
  # Send 6-vectors back to socket as [n,n,n,n,n,n]
  def return_vector(p):
    socket_send_string("[")
    i = 0
    while i < 6:
      if i > 0:
        socket_send_string(",")
      end
      socket_send_string(p[i])
      i = i + 1
    end
    socket_send_string("]")
  end
  
  # Send 6-element position back to socket as:
  #   (isPose=False) name=[n,n,n,n,n,n]
  #   (isPose=True)name=p[n,n,n,n,n,n]
  def return_position(name, isPose, p):
    socket_send_string(name)
    socket_send_string("=")
    if isPose == True:
      socket_send_string("p")
    end
    return_vector(p)
    socket_send_lf()
  end
  
  # Return a 6-element vector as a pose name=p[.....]
  def return_pose(name, p):
    return_position(name, True, p)
  end
  
  # Return a 6-element vector as joint angles name=[.....]
  def return_joints(name, p):
    return_position(name, False, p)
  end
  $ 3 "Script: agscript_robot.script"
  # AutoGrind Robot Functions
  # File: agscript_robot.script
  # Version 1.0
  # Programmer: Ned Lecky
  
  global response = "unknown"
  
  global speed = 0.3
  global accel = 0.3
  
  # Set speed to s if s<>0. Always returns "speed=[current speed]"
  def set_speed(s):
    if s > 0:
      speed = s
    end
    socket_send_string("speed=")
    socket_send_string(speed)
    socket_send_lf()
    global response = "set_speed()"
  end
  
  # Set accel to a if a<>0. Always returns "accel=[current accel]"
  def set_accel(a):
    if a > 0:
      accel = a
    end
    socket_send_string("accel=")
    socket_send_string(accel)
    socket_send_lf()
    global response = "set_accel()"
  end
  
  # Send get_tcp_offset() result to socket
  def return_tcp_offset():
    p = get_tcp_offset()
    return_pose("tcp_offset", p)
    global response = "return_tcp_offset()"
  end
  
  # Send get_actual_tcp_pose() to socket
  def return_actual_tcp_pose():
    p = get_actual_tcp_pose()
    return_pose("actual_tcp_pose", p)
    global response = "return_actual_tcp_pose()"
  end
  
  # Send return_actual_tcp_pose_RPY() to socket
  def return_actual_tcp_pose_RPY():
    p = get_actual_tcp_pose_RPY()
    return_pose("actual_tcp_pose_RPY", p)
    global response = "return_actual_tcp_pose_RPY()"
  end
  
  # Send get_actual_joint_positions() to
  def return_get_actual_joint_positions():
    p = get_actual_joint_positions()
    return_joints("actual_joint_positions", p)
    global response = "return_get_actual_joint_positions()"
  end
  
  # Movel relatively in RPY
  def movel_RPY_rel():
    p0 = get_actual_tcp_pose_RPY()
    p1 = p[command[2], command[3], command[4], command[5], command[6], command[7]]
    p2 = pose_add_RPY(p0, p1)
    movel_RPY(p2, accel, speed)
    global response = "movel_RPY_rel()"
  end
  
  # Movej relatively in RPY
  def movej_RPY_rel():
    p0 = get_actual_tcp_pose_RPY()
    p1 = p[command[2], command[3], command[4], command[5], command[6], command[7]]
    p2 = pose_add_RPY(p0, p1)
    movej_RPY(p2, accel, speed)
    global response = "movej_RPY_rel()"
  end
  
  # Movej to R
  def movej_R(R = 0):
    p = get_actual_tcp_pose_RPY()
    p[3] = R
    movej_RPY(p, accel, speed)
    global response = "movej_R()"
  end
  # Movej to P
  def movej_P_zero(P = 0):
    p = get_actual_tcp_pose_RPY()
    p[4] = P
    movej_RPY(p, accel, speed)
    global response = "movej_P()"
  end
  # Movej to Y
  def movej_Y(Y = 0):
    p = get_actual_tcp_pose_RPY()
    p[5] = Y
    movej_RPY(p, accel, speed)
    global response = "movej_Y()"
  end
  # Movej to 0,0,0, RPY
  def movej_RPY_only(R=0, P=0, Y=0):
    p = get_actual_tcp_pose_RPY()
    p[3] = R
    p[4] = P
    p[5] = Y
    movej_RPY(p, accel, speed)
    global response = "movej_RPY_only()"
  end
  
  # Movej to physical joint positions
  def movej_q():
    q1 = [command[2], command[3], command[4], command[5], command[6], command[7]]
    movej(q1, accel, speed)
    global response = "movej_q()"
  end
  $ 4 "Script: agscript_grind.script"
  # AutoGrind Grinding Functions
  # File: agscript_grind.script
  # Version 1.0
  # Programmer: Ned Lecky
  
  global listenerThread = 0
  global threadCount = 0
  global haltCount = 0
  global haltCommand = [0, 0]
  
  global tool_length_m = 0.100
  
  def coolant_flow(on = False):
  
    return None
  end
  
  def tool_power(on = False):
  
    return None
  end
  
  def apply_force(on = False):
  
    return None
  end
  
  # Get into contact with part (or away from)
  def contact_part(on = False):
    if on:
      # Advance until contact
      # Simulated....
      p1 = pose_trans(get_forward_kin(), p[0, 0, 0.020, 0, 0, 0])
      movel(p1, accel, speed)
    else:
      p1 = pose_trans(get_forward_kin(), p[0, 0, -0.020, 0, 0, 0])
      movel(p1, accel, speed)
    end
  
    return True
  end
  
  # Abort system
  thread listener_thread():
    global haltCommand = [0, 0]
    global haltCount = 0
    while (True):
      global threadCount = threadCount + 1
      global haltCommand = socket_read_ascii_float(1, timeout = 0.1)
      if haltCommand[0] > 0:
        global haltCount = haltCount + 1
      end
    end
  
    return False
  end
  
  def ok_to_proceed():
    return haltCount == 0
  end
  
  # Execute the desired pattern grind selected by command[2]
  def pattern_grind():
    #global listen_thread
    if listenerThread > 0:
      kill listenerThread
      listenerThread = 0
    end
    listenerThread = run listener_thread()
  
    global grind_cycle = 0
    global grind_n_cycles = 0
    global grind_dx_mm = 0
    global grind_dy_mm = 0
    global grind_dz_mm = 0
    global grind_dr_mm = 0
    #global grind_dP_mm = 0
    #global grind_dY_mm = 0
    global grind_radius_mm = 0
    global grind_xstep_mm = 0
    global grind_ystep_mm = 0
    global grind_rstep_mm = 0
  
    if command[2] == 10:
      global response = "grind_flat_rect"
      global grind_dx_mm = command[3]
      global grind_dy_mm = command[4]
      global grind_n_cycles = command[5]
      grind_flat_rect(grind_dx_mm, grind_dy_mm, grind_n_cycles)
    elif command[2] == 20:
      global response = "grind_cyl_rect"
      global grind_dx_mm = command[3]
      global grind_dr_mm = command[4]
      global grind_radius_mm = command[5]
      global grind_n_cycles = command[6]
      grind_cyl_rect(grind_dx_mm, grind_dr_mm, grind_radius_mm, grind_n_cycles)
    elif command[2] == 30:
      global response = "grind_flat_serp"
      global grind_dx_mm = command[3]
      global grind_dy_mm = command[4]
      global grind_xstep_mm = command[5]
      global grind_ystep_mm = command[6]
      global grind_n_cycles = command[7]
      grind_flat_serp(grind_dx_mm, grind_dy_mm, grind_xstep_mm, grind_ystep_mm, grind_n_cycles)
    elif command[2] == 40:
      global response = "grind_cyl_serp"
      global grind_dx_mm = command[3]
      global grind_dr_mm = command[4]
      global grind_xstep_mm = command[5]
      global grind_rstep_mm = command[6]
      global grind_radius_mm = command[7]
      global grind_n_cycles = command[8]
      grind_cyl_serp(grind_dx_mm, grind_dr_mm, grind_xstep_mm, grind_rstep_mm, grind_radius_mm, grind_n_cycles)
    elif command[2] == 50:
      global response = "grind_flat_circle"
      global grind_dx_mm = command[3]
      global grind_n_cycles = command[4]
      grind_flat_circle(grind_dx_mm, grind_n_cycles)
    else:
      global response = "Unknown Grind Command"
    end
  
    kill listenerThread
    listenerThread = 0
  end
  
  # Grind along a flat rect dx_mm x dy_mm centered on current tool position. Repeat n_cycles times.
  # Move in x direction first, then y
  def grind_flat_rect(dx_mm, dy_mm, n_cycles):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    dy_m = dy_mm / 1000.0
  
    # Find initial position p0
    set_tcp(p[0, 0, tool_length_m, 0, 0, 0])
    p0 = get_actual_tcp_pose()
  
    # Move to offset position bottom left of scan area
    p1 = pose_trans(get_forward_kin(), p[-dx_m / 2, -dy_m / 2, 0, 0, 0, 0])
    movel(p1, accel, speed)
  
    if not contact_part(True):
      movel(p0, accel, speed)
      return False
    end
    tool_power(True)
    coolant_flow(True)
    apply_force(True)
  
    # Grind box pattern
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[dx_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, dy_m, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[-dx_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, -dy_m, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
      grind_cycle = grind_cycle + 1
    end
  
    apply_force(False)
    contact_part(False)
    coolant_flow(False)
    tool_power(False)
  
    # Return robot back to initial position
    movel(p0, accel, speed)
    return True
  end
  
  # Grind along a cylindrical rect dx_mm,dr_mm with radius_mm centered on current tool position. Repeat n_cycles times.
  # Move in x direction first, then r
  def grind_cyl_rect(dx_mm, dr_mm, radius_mm, n_cycles):
    if n_cycles < 1:
      return False
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    radius_m = radius_mm / 1000.0
    dr_rad = dr_mm / radius_mm
  
    # Find initial position p0
    set_tcp(p[0, 0, tool_length_m + radius_m, 0, 0, 0])
    p0 = get_actual_tcp_pose()
  
    # Move to offset position bottom left of scan area
    p1 = pose_trans(get_forward_kin(), p[-dx_m / 2, 0, 0, -dr_rad / 2, 0, 0])
    movel(p1, accel, speed)
  
    if not contact_part(True):
      movel(p0, accel, speed)
      return False
    end
    tool_power(True)
    coolant_flow(True)
    apply_force(True)
  
    # Grind cylindrical box pattern
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[dx_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, 0, 0, dr_rad, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[-dx_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
      end
  
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, 0, 0, -dr_rad, 0, 0])
        movel(p1, accel, speed)
      end
      grind_cycle = grind_cycle + 1
    end
  
    apply_force(False)
    contact_part(False)
    coolant_flow(False)
    tool_power(False)
  
    # Return robot back to initial position
    movel(p0, accel, speed)
    return True
  end
  
  # Grind along a flat serpentine dx_mm,dy_mm incrementing by xstep_mm,ystep_mm centered on current tool position. Repeat n_cycles times.
  # Move in x direction first, then y
  def grind_flat_serp(dx_mm, dy_mm, xstep_mm, ystep_mm, n_cycles):
    if n_cycles < 1:
      return False
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    dy_m = dy_mm / 1000.0
    xstep_m = xstep_mm / 1000.0
    ystep_m = ystep_mm / 1000.0
    x_grid_count = floor(dx_m / xstep_m)
    y_grid_count = floor(dy_m / ystep_m)
  
    # Find initial position
    set_tcp(p[0, 0, tool_length_m, 0, 0, 0])
    p0 = get_actual_tcp_pose()
  
    # Move to offset position bottom left of scan area
    p1 = pose_trans(get_forward_kin(), p[-dx_m / 2, -dy_m / 2, 0, 0, 0, 0])
    movel(p1, accel, speed)
  
    if not contact_part(True):
      movel(p0, accel, speed)
      return False
    end
    tool_power(True)
    coolant_flow(True)
    apply_force(True)
  
    # Grind serpentine pattern
    global grind_cycle = 1
    x_grid = 0
    y_grid = 0
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      # Advance x by xstep_m
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[xstep_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
        # Track new grid square we're in
        if xstep_m > 0:
          x_grid = x_grid + 1
        else:
          x_grid = x_grid - 1
        end
      end
      # Adjust x direction
      if x_grid >= x_grid_count-1 and xstep_m > 0:
        xstep_m = -xstep_m
      elif x_grid == 0 and xstep_m < 0:
        xstep_m = -xstep_m
      end
  
      # Advance y by ystep_m
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, ystep_m, 0, 0, 0, 0])
        movel(p1, accel, speed)
        # Track new grid square we're in
        if ystep_m > 0:
          y_grid = y_grid + 1
        else:
          y_grid = y_grid - 1
        end
      end
      # Adjust y direction
      if y_grid >= y_grid_count-1 and ystep_m > 0:
        ystep_m = -ystep_m
      elif y_grid == 0 and ystep_m < 0:
        ystep_m = -ystep_m
      end
  
      # Detect when we've covered all the grid squares!
      # That's when you reach n-1,n-1 or 0,0
      if x_grid == x_grid_count - 1 and y_grid == y_grid_count - 1:
        grind_cycle = grind_cycle + 1
      elif x_grid == 0 and y_grid == 0:
        grind_cycle = grind_cycle + 1
      end
    end
  
    apply_force(False)
    contact_part(False)
    coolant_flow(False)
    tool_power(False)
  
    # Return robot back to initial position
    movel(p0, accel, speed)
    return True
  end
  
  # Grind along a cylindrical serpentine dx_mm,dr_mm incrementing by xstep_mm,rstep_mm centered on current tool position. Repeat n_cycles times.
  # Move in x direction first, then r
  def grind_cyl_serp(dx_mm, dr_mm, xstep_mm, rstep_mm, radius_mm, n_cycles):
    if n_cycles < 1:
      return False
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    radius_m = radius_mm / 1000.0
    dr_rad = dr_mm / radius_mm
    xstep_m = xstep_mm / 1000.0
    rstep_rad = dr_mm / radius_mm
    x_grid_count = floor(dx_mm / xstep_mm)
    r_grid_count = floor(dr_mm / rstep_mm)
  
    # Find initial position
    set_tcp(p[0, 0, tool_length_m + radius_m, 0, 0, 0])
    p0 = get_actual_tcp_pose()
  
    # Move to offset position bottom left of scan area
    p1 = pose_trans(get_forward_kin(), p[-dx_m / 2, 0, 0, -dr_rad / 2, 0, 0])
    movel(p1, accel, speed)
  
    if not contact_part(True):
      movel(p0, accel, speed)
      return False
    end
    tool_power(True)
    coolant_flow(True)
    apply_force(True)
  
    # Grind serpentine pattern
    global grind_cycle = 1
    x_grid = 0
    r_grid = 0
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      # Advance x by xstep_m
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[xstep_m, 0, 0, 0, 0, 0])
        movel(p1, accel, speed)
        # Track new grid square we're in
        if xstep_m > 0:
          x_grid = x_grid + 1
        else:
          x_grid = x_grid - 1
        end
      end
      # Adjust x direction
      if x_grid >= x_grid_count-1 and xstep_m > 0:
        xstep_m = -xstep_m
      elif x_grid == 0 and xstep_m < 0:
        xstep_m = -xstep_m
      end
  
      # Advance r by rstep_rad
      if ok_to_proceed():
        p1 = pose_trans(get_forward_kin(), p[0, 0, 0, rstep_rad, 0, 0])
        movel(p1, accel, speed)
        # Track new grid square we're in
        if rstep_rad > 0:
          r_grid = r_grid + 1
        else:
          r_grid = r_grid - 1
        end
      end
      # Adjust r direction
      if r_grid >= r_grid_count-1 and rstep_rad > 0:
        rstep_rad = -rstep_rad
      elif r_grid == 0 and rstep_rad < 0:
        rstep_rad = -rstep_rad
      end
  
      # Detect when we've covered all the grid squares!
      # That's when you reach n-1,n-1 or 0,0
      if x_grid == x_grid_count - 1 and r_grid == r_grid_count - 1:
        grind_cycle = grind_cycle + 1
      elif r_grid == 0 and r_grid == 0:
        grind_cycle = grind_cycle + 1
      end
    end
  
    apply_force(False)
    contact_part(False)
    coolant_flow(False)
    tool_power(False)
  
    # Return robot back to initial position
    movel(p0, accel, speed)
    return True
  end
  
  # Grind along a flat circle diam dx_mm centered on current tool position. Repeat n_cycles times.
  def grind_flat_circle(dx_mm, n_cycles):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    n_points = ceil(dx_mm * 1.0) # 10 points in a 10mm diam circle... linear n_points up and down from there
    radius_m = dx_m / 2          # Circle radius is half of specified dx
  
    # Find initial position p0
    set_tcp(p[0, 0, tool_length_m, 0, 0, 0])  #
    p0 = get_actual_tcp_pose()
  
    # Move to offset position east edge of circle
    p1 = pose_trans(get_forward_kin(), p[radius_m, 0, 0, 0, 0, 0])
    movel(p1, accel, speed)
  
    if not contact_part(True):
      movel(p0, accel, speed)
      return False
    end
    # We're in contact at east side... compute where contact position would be at center of circle
    p_center = pose_trans(get_forward_kin(), p[-radius_m, 0, 0, 0, 0, 0])
    tool_power(True)
    coolant_flow(True)
    apply_force(True)
  
    # Grind circle pattern
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      i = 1
      while ok_to_proceed() and i <= n_points:
        theta = d2r(360.0 * i / n_points)
        x = radius_m * cos(theta)
        y = radius_m * sin(theta)
  
        p1 = pose_trans(p_center, p[x, y, 0, 0, 0, 0])
        movel(p1, accel, speed, 0.005)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
    end
  
    apply_force(False)
    contact_part(False)
    coolant_flow(False)
    tool_power(False)
  
    # Return robot back to initial position
    movel(p0, accel, speed)
    return True
  end
  
  $ 5 "currentTcpPose≔get_actual_tcp_pose()"
  global currentTcpPose= get_actual_tcp_pose ()
  $ 6 "MoveJ"
  $ 7 "currentTcpPose" "breakAfter"
  movej(currentTcpPose, a=1.3962634015954636, v=1.0471975511965976)
  $ 8 "socket_close()"
  socket_close()
  $ 9 "Wait: 0.25"
  sleep(0.25)
  $ 10 "socket_is_open≔ False "
  global socket_is_open=  False  
  $ 11 "command_index≔0"
  global command_index=0
  while (True):
    $ 12 "Robot Program"
    $ 13 "Loop socket_is_open ≟  False "
    while (socket_is_open  ==    False  ):
      $ 14 "socket_is_open≔socket_open('192.168.25.1', 30000)"
      global socket_is_open=socket_open("192.168.25.1", 30000)
      $ 15 "Wait: 1.0"
      sleep(1.0)
    end
    $ 16 "response≔'Unknown command'"
    global response="Unknown command"
    $ 17 "command≔socket_read_ascii_float(10)"
    global command=socket_read_ascii_float(10)
    $ 18 "If command[0]≥1"
    if (command[0] >= 1):
      $ 19 "socket_send_line('robot_running=True')"
      socket_send_line("robot_running=True")
      $ 20 "command_index≔command_index+1"
      global command_index=command_index+1
      $ 21 "socket_set_var('robot_index', command_index)"
      socket_set_var("robot_index", command_index)
      $ 22 "lastCommand≔command"
      global lastCommand=command
      $ 23 "Switch command[1]"
      switch_1 = command[1]
      $ 24 "Case 1"
      if (1 == switch_1):
        $ 25 "MoveL"
        $ 26 "up_pose" "breakAfter"
        movel(up_pose_p, a=1.2, v=0.25)
        $ 27 "response≔'moved up'"
        global response="moved up"
      elif (2 == switch_1):
        $ 28 "Case 2"
        $ 29 "MoveJ"
        $ 30 "down_pose" "breakAfter"
        movej(get_inverse_kin(down_pose_p, qnear=down_pose_q), a=1.3962634015954636, v=1.0471975511965976)
        $ 31 "response≔'moved down'"
        global response="moved down"
      elif (3 == switch_1):
        $ 32 "Case 3"
        $ 33 "response≔'close'"
        global response="close"
      elif (4 == switch_1):
        $ 34 "Case 4"
        $ 35 "response≔'open'"
        global response="open"
      elif (10 == switch_1):
        $ 36 "Case 10"
        $ 37 "return_actual_tcp_pose()"
        return_actual_tcp_pose()
      elif (11 == switch_1):
        $ 38 "Case 11"
        $ 39 "return_actual_tcp_pose_RPY()"
        return_actual_tcp_pose_RPY()
      elif (12 == switch_1):
        $ 40 "Case 12"
        $ 41 "return_tcp_offset()"
        return_tcp_offset()
      elif (13 == switch_1):
        $ 42 "Case 13"
        $ 43 "movel_RPY_rel()"
        movel_RPY_rel()
      elif (14 == switch_1):
        $ 44 "Case 14"
        $ 45 "movej_RPY_rel()"
        movej_RPY_rel()
      elif (15 == switch_1):
        $ 46 "Case 15"
        $ 47 "movej_R_only(command[2])"
        movej_R_only(command[2])
      elif (16 == switch_1):
        $ 48 "Case 16"
        $ 49 "movej_P_only(command[2])"
        movej_P_only(command[2])
      elif (17 == switch_1):
        $ 50 "Case 17"
        $ 51 "movej_Y_only(command[2])"
        movej_Y_only(command[2])
      elif (18 == switch_1):
        $ 52 "Case 18"
        $ 53 "movej_RPY_only(command[2],command[3],command[4])"
        movej_RPY_only(command[2],command[3],command[4])
      elif (20 == switch_1):
        $ 54 "Case 20"
        $ 55 "return_get_actual_joint_positions()"
        return_get_actual_joint_positions()
      elif (21 == switch_1):
        $ 56 "Case 21"
        $ 57 "movej_q()"
        movej_q()
      elif (30 == switch_1):
        $ 58 "Case 30"
        $ 59 "set_speed(command[2])"
        set_speed(command[2])
      elif (31 == switch_1):
        $ 60 "Case 31"
        $ 61 "set_accel(command[2])"
        set_accel(command[2])
      elif (40 == switch_1):
        $ 62 "Case 40"
        $ 63 "pattern_grind()"
        pattern_grind()
      elif (50 == switch_1):
        $ 64 "Case 50"
        $ 65 "Call AG_50"
        AG_50()
      elif (98 == switch_1):
        $ 66 "Case 98"
        $ 67 "response≔'socket reset'"
        global response="socket reset"
      elif (99 == switch_1):
        $ 68 "Case 99"
        $ 69 "response≔'exiting'"
        global response="exiting"
      else:
        $ 70 "Default Case"
        $ 71 "response≔'unknown command'"
        global response="unknown command"
      end
      $ 72 "socket_send_line('robot_response=' + response + '#robot_running=False')"
      socket_send_line("robot_response=" + response + "#robot_running=False")
      $ 73 "If command[1]≟98"
      if (command[1] == 98):
        $ 74 "Wait: 0.5"
        sleep(0.5)
        $ 75 "socket_close()"
        socket_close()
        $ 76 "socket_is_open≔ False "
        global socket_is_open=  False  
      end
      $ 77 "If command[1]≟99"
      if (command[1] == 99):
        $ 78 "Wait: 0.5"
        sleep(0.5)
        $ 79 "socket_close()"
        socket_close()
        $ 80 "socket_is_open≔ False "
        global socket_is_open=  False  
        $ 81 "Halt"
        halt
      end
    else:
      $ 82 "Else" "noBreak"
    end
  end
end
