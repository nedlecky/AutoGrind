# AutoGrind General UR Utilities
# File: agscript_util.script
# Version 1.0
# Programmer: Ned Lecky

def max(n1, n2):
  if n1 > n2:
    return n1
  else:
    return n2
  end
end
def min(n1, n2):
  if n1 < n2:
    return n1
  else:
    return n2
  end
end
def abs(n):
  if n < 0:
    return -n
  else:
    return n
  end
end

# Limit a param to values lowLim <= param <= hiLim
def limiter(param, loLim, hiLim):
  if param < loLim:
    return loLim
  elif param > hiLim:
    return hiLim
  else:
    return param
  end
end

# Send CRLF out the socket
def socket_send_crlf():
  socket_send_byte(13)
  socket_send_byte(10)
end

# Send LF out the socket
def socket_send_lf():
  socket_send_byte(10)
end

# Send n-vectors back to socket as [n,n,n,n,n,n]
def return_vector(p, n = 6):
  socket_send_string("[")
  i = 0
  while i < n:
    if i > 0:
      socket_send_string(",")
    end
    socket_send_string(p[i])
    i = i + 1
  end
  socket_send_string("]")
end

# Send 6-element position back to socket as:
#   (isPose=False) name=[n,n,n,n,n,n]
#   (isPose=True)name=p[n,n,n,n,n,n]
def return_position(name, isPose, p):
  socket_send_string(name)
  socket_send_string("=")
  if isPose == True:
    socket_send_string("p")
  end
  return_vector(p, 6)
  socket_send_lf()
end

# Return a 6-element vector as a pose name=p[.....]
def return_pose(name, p):
  return_position(name, True, p)
end

# Return a 6-element vector as joint angles name=[.....]
def return_joints(name, p):
  return_position(name, False, p)
end

# Basically returns command[3:] padded out with -1s to always be 8 elements
# Assumes length of command is encoded in command[0]
def command_3_padded_8(command):
  ret8 = [-1, -1, -1, -1, -1, -1, -1, -1]
  i = 0
  while i < command[0]-2:
    ret8[i] = command[i + 3]
    i = i + 1
  end
  return ret8
end

