def AG_until_io():
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.175,0.0,0.0,0.0])
  set_payload(1.0, [0.0, 0.0, 0.05])
  step_count_f2feb069_4390_4794_ad7d_5ae1153a72de = 0.0
  thread Step_Counter_Thread_d7749328_641f_4378_b5bf_e6ba75796121():
    while (True):
      step_count_f2feb069_4390_4794_ad7d_5ae1153a72de = step_count_f2feb069_4390_4794_ad7d_5ae1153a72de + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_d7749328_641f_4378_b5bf_e6ba75796121()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  global Waypoint_1_p=p[.085902215655, -.446433547226, .070227589175, -3.131903467173, -.001505480009, .013524111048]
  global Waypoint_1_q=[1.4684873819351196, -1.5035944742015381, 2.1648243109332483, -2.2231556377806605, -1.579266373311178, 3.0389065742492676]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  $ 1 "Robot Program"
  $ 2 "MoveL"
  $ 3 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.2, v=0.25)
  $ 4 "Direction: Tool Z+"
  global move_thread_flag_4=0
  thread move_thread_4():
    enter_critical
    move_thread_flag_4 = 1
    local towardsPos=calculate_point_to_move_towards(get_forward_kin(), [0.0,0.0,1.0], 1000.0)
    movel(towardsPos, a=0.4, v=0.02)
    move_thread_flag_4 = 2
    exit_critical
  end
  move_thread_flag_4 = 0
  move_thread_han_4 = run move_thread_4()
  while (True):
    if (get_standard_digital_in(3) == False):
      kill move_thread_han_4
      stopl(3.0)
      $ 5 "Until (io)"
      break
    end
    local targetTcpDirection=get_target_tcp_speed()
    local stepsToRetract=tool_contact(direction=targetTcpDirection)
    if (stepsToRetract > 0):
      kill move_thread_han_4
      stopl(0.5)
      local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
      local contactPose=get_forward_kin(backTrackMovement)
      local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
      local retractTo=contactPose
      if (norm(posDir) > 1e-6):
        local normalizedPosDir=normalize(posDir)
        local additionalRetraction=p[normalizedPosDir[0] * 0.004, normalizedPosDir[1] * 0.004, normalizedPosDir[2] * 0.004, 0, 0, 0]
        retractTo = pose_sub(contactPose, additionalRetraction)
      end
      movel(retractTo, a=0.5, v=0.1)
      $ 6 "Until (tool_contact_detection)"
      break
    end
    sync()
  end
  $ 7 "Waypoint_1" "breakAfter"
  movel(Waypoint_1_p, a=1.2, v=0.25)
end
