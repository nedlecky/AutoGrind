# AutoGrind Robot Functions
# File: agscript_robot.script
# Version 1.0
# Programmer: Ned Lecky

global response = "unknown"

global robot_speed = 1.0
global robot_accel = 1.0

# Set speed to s if s<>0. Always returns "speed=[current speed]"
def set_speed(s):
  if s > 0:
    robot_speed = s
  end
  socket_send_string("robot_speed=")
  socket_send_string(robot_speed)
  socket_send_lf()
  global response = "set_speed()"
end

# Set accel to a if a<>0. Always returns "accel=[current accel]"
def set_accel(a):
  if a > 0:
    robot_accel = a
  end
  socket_send_string("robot_accel=")
  socket_send_string(robot_accel)
  socket_send_lf()
  global response = "set_accel()"
end

# Send get_tcp_offset() result to socket
def return_tcp_offset():
  p = get_tcp_offset()
  return_pose("tcp_offset", p)
  global response = "return_tcp_offset()"
end

# Send get_actual_tcp_pose() to socket
def return_actual_tcp_pose():
  p = get_actual_tcp_pose()
  return_pose("actual_tcp_pose", p)
  global response = "return_actual_tcp_pose()"
end

# Send get_actual_joint_positions() to
def return_get_actual_joint_positions():
  p = get_actual_joint_positions()
  return_joints("actual_joint_positions", p)
  global response = "return_get_actual_joint_positions()"
end

# Movel relatively
def movel_relative(p1):
  p0 = get_actual_tcp_pose()
  p2 = pose_add(p0, p1)
  movel(p2, robot_accel, robot_speed)
  global response = "movel_relative()"
end

# Change one element of current pose and movel there
def movel_one_only(index=0, val = 0):
  p = get_actual_tcp_pose()
  p[index] = val
  movel(p, robot_accel, robot_speed)
  global response = "movel_one_only()"
end

# Change only rotation elements of current pose and movel there
def movel_rot_only(r1=0, r2=0, r3=0):
  p = get_actual_tcp_pose()
  p[3] = r1
  p[4] = r2
  p[5] = r3
  movel(p, robot_accel, robot_speed)
  global response = "movel_rot_only()"
end

# Movej to physical joint positions
def movej_q(q):
  movej(q, robot_accel, robot_speed)
  global response = "movej_q()"
end
