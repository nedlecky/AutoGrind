# File: agscript_util.script
# Project: AutoGrind
# Author: Ned Lecky, Lecky Engineering LLC
# Purpose: General utility functions used in AutoGrind

global robot_util_version = "2022-06-13"

# Return max of 2 numeric values
def max(n1, n2):
  if n1 > n2:
    return n1
  else:
    return n2
  end
end

# Return min of 2 numeric values
def min(n1, n2):
  if n1 < n2:
    return n1
  else:
    return n2
  end
end

# Return absolute value of a numeric value
def abs(n):
  if n < 0:
    return -n
  else:
    return n
  end
end

# Adjust the value x by pct
def adjust_pct(x, pct):
  return x * (1.0 + pct / 100.0)
end

# Return param limited to lowLim <= param <= hiLim
def limiter(param, loLim, hiLim):
  if param < loLim:
    return loLim
  elif param > hiLim:
    return hiLim
  else:
    return param
  end
end

# Send LF out the socket
def socket_send_lf():
  socket_send_byte(10)
end

# Send "SET name ivalue" out the socket. Assumes ints
# Built-in function does this!
def socket_send_integer(name, ivalue):
  socket_set_var(name, ivalue)
end

# Send "name=value" out the socket. Works on ints or floats
def socket_send_num(name, value):
  enter_critical
  socket_send_string(name + "=")
  socket_send_line(value)
  exit_critical
end

# Send "name=True" or "name=False" out the socket based on f
def socket_send_bool(name, f):
  enter_critical
  socket_send_string(name + "=")
  if (f):
    socket_send_line("True")
  else:
    socket_send_line("False")
  end
  exit_critical
end

# Send name=[   ] out the secket for vector with length
def socket_send_vector(name, vector, length, is_pose = False):
  enter_critical
  socket_send_string(name+"=")
  if is_pose:
    socket_send_string("p")
  end
  socket_send_vector_only(vector, length)
  socket_send_lf()
  exit_critical
end


# Send n-vectors back to socket as [n,n,n,n,n,n]
def socket_send_vector_only(p, n = 6):
  socket_send_string("[")
  i = 0
  while i < n:
    if i > 0:
      socket_send_string(",")
    end
    socket_send_string(p[i])
    i = i + 1
  end
  socket_send_string("]")
end

# Return a 6-element vector to socket as a pose name=p[.....]
def socket_send_pose(name, p):
  socket_send_vector(name, p, 6, True)
end

# Return a 6-element vector to socket as joint angles name=[.....]
def socket_send_joints(name, p):
  socket_send_vector(name, p, 6, False)
end

# Special support to receive 1-4 port,value pairs and always pad with -1s to make 4 pairs
# Essentially returns command[3:end] padded out with -1s to always be 8 elements
# Assumes length of command is specified in command[0]
def command_3_padded_8(command):
  ret8 = [-1, -1, -1, -1, -1, -1, -1, -1]
  i = 0
  while i < command[0]-2:
    ret8[i] = command[i + 3]
    i = i + 1
  end
  return ret8
end
