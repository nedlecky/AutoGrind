def AutoGrind01():
  global _hidden_verificationVariable=0
  step_count_d2d97ad4_2071_4839_aac1_973532516552 = 0.0
  thread Step_Counter_Thread_ddc1e9a6_cae0_4d59_b549_693fe98617a1():
    while (True):
      step_count_d2d97ad4_2071_4839_aac1_973532516552 = step_count_d2d97ad4_2071_4839_aac1_973532516552 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_ddc1e9a6_cae0_4d59_b549_693fe98617a1()
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  set_target_payload(0.980000, [0.000000, 0.002000, 0.048000], [0.001488, 0.001488, 0.001488, 0.000000, 0.000000, 0.000000])
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 1)
  set_analog_outputdomain(1, 1)
  set_input_actions_to_default()
  set_standard_digital_input_action(7, "freedrive")
  set_runstate_standard_digital_outputs([0,2,3,4,5,6])
  set_runstate_standard_digital_output_to_value(0, 4)
  set_runstate_standard_digital_output_to_value(1, 5)
  set_runstate_standard_digital_output_to_value(2, 4)
  set_runstate_standard_digital_output_to_value(3, 4)
  set_runstate_standard_digital_output_to_value(4, 4)
  set_runstate_standard_digital_output_to_value(5, 4)
  set_runstate_standard_digital_output_to_value(6, 4)
  set_tcp(p[-6.245592228025232E-4,-0.07206106801719056,0.10268484195633201,0.0,2.2214,-2.2214])
  set_safety_mode_transition_hardness(1)
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.10.17249, Robotiq Inc.
  #   Type: Vacuum
  #################################################
  # Vacuum Grip Check
  #################################################
  
  vacuumGripCheckThread1 = 0
  vacuumGripCheckThread2 = 0
  vacuumGripCheckThread3 = 0
  vacuumGripCheckThread4 = 0
  vacuumGripCheckThread1Running = False
  vacuumGripCheckThread2Running = False
  vacuumGripCheckThread3Running = False
  vacuumGripCheckThread4Running = False
  vacuumGripCheckSocketId = "1"
  vacuumGripCheckThreadStarted = False
  
  thread vacuumGripCheck():
    gripper_socket = vacuumGripCheckSocketId
    vacuumGripCheckThreadStarted = True
  
    while (True):
      objectDetectedDebounceCtr = 0
  
      while (objectDetectedDebounceCtr < 3):
        if(rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectDetectedDebounceCtr = objectDetectedDebounceCtr + 1
        else:
          objectDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      objectNotDetectedDebounceCtr = 0
  
      while objectNotDetectedDebounceCtr < 3:
        if (not rq_is_vacuum_obj_detected(gripper_socket="1")):
          objectNotDetectedDebounceCtr = objectNotDetectedDebounceCtr + 1
        else:
          objectNotDetectedDebounceCtr = 0
        end
        sleep(0.1)
      end
  
      socket_open("127.0.0.1",29999,"dashboardServerSocket")
      socket_send_line("pause","dashboardServerSocket")
      socket_send_string("popup Vacuum grip check has detected an object drop.", "dashboardServerSocket")
      socket_send_byte(10, "dashboardServerSocket")
      socket_close("dashboardServerSocket")
  
      sleep(0.008)
    end
  end
  
  def startVacuumGripCheckThread(gripperId="1"):
    vacuumGripCheckSocketId = gripperId
    threadHandle = run vacuumGripCheck()
    waitForVacuumGripCheckThreadStarted()
    return threadHandle
  end
  
  def stopVacuumGripCheckThread(threadHandle):
    kill threadHandle
  end
  
  def waitForVacuumGripCheckThreadStarted():
    while (not(vacuumGripCheckThreadStarted)):
      sleep(0.008)
    end
    vacuumGripCheckThreadStarted = False
  end
  #################################################
  # End - Vacuum Grip Check
  #################################################
  
  #################################################
  # Stops the pump on a distance travelled
  #################################################
  global stopPumpDistance = 100
  global stopPumpSocketId = "0"
  global stopPumpThreadStarted = [False, False, False, False]
  global stopPumpThreadHandles = [0, 0, 0, 0]
  
  thread stopPumpOnDistanceTravelled():
    distance = stopPumpDistance
    socketId = stopPumpSocketId
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = True
  
    measuredDistance = waitForDistanceTravelled(distance)
  
    rq_stop(socketId)
  
    stopPumpThreadStarted[rq_socket_to_index(socketId)] = False
  end
  
  def waitForDistanceTravelled(distance):
    startingPose = get_actual_tcp_pose()
    measuredDistance = 0
    while (measuredDistance < distance):
      sleep(0.1)
      measuredDistance = point_dist(get_actual_tcp_pose(), startingPose)
    end
  
    return measuredDistance
  end
  
  def startStopPumpOnDistanceTravelledThread(distance, gripper_socket="1"):
    if (stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]):
      return 0
    end
  
    global stopPumpDistance = distance
    global stopPumpSocketId = gripper_socket
    stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = run stopPumpOnDistanceTravelled()
    waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket)
    return stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
  end
  
  def waitForStopPumpOnDistanceTravelledThreadStarted(gripper_socket="1"):
    while (not(stopPumpThreadStarted[rq_socket_to_index(gripper_socket)])):
      sleep(0.008)
    end
  end
  
  def stopStopPumpOnDistanceTravelledThread(gripper_socket="1"):
    handle = stopPumpThreadHandles[rq_socket_to_index(gripper_socket)]
    threadIsRunning = stopPumpThreadStarted[rq_socket_to_index(gripper_socket)]
    if (threadIsRunning):
      kill handle
      clear_socket_buffer(gripper_socket, 0.01)
      stopPumpThreadHandles[rq_socket_to_index(gripper_socket)] = 0
    end
  end
  #################################################
  # End - Stops the pump on a distance travelled
  #################################################
  
  #################################################
  # Vacuum general functions
  #################################################
  def rq_wait_for_vacuum_object_detected(gripper_socket="1"):
      while (not rq_is_vacuum_obj_detected(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_secured(gripper_socket="1"):
      while (not rq_is_vacuum_obj_secured(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.008)
      end
      return True
  end
  
  def rq_wait_for_vacuum_object_suction_complete(gripper_socket="1"):
      remaining_retries = 50
  
       # Wait for suction started
      while (not rq_is_vacuum_obj_in_suction(gripper_socket) and
             not rq_is_vacuum_obj_detected(gripper_socket) and
             remaining_retries > 0):
          sleep(0.01)
          remaining_retries = remaining_retries - 1
      end
  
      # Wait for suction completed
      while (rq_is_vacuum_obj_in_suction(gripper_socket)):
          if (rq_is_vacuum_timeout(gripper_socket)):
              return False
          end
          sleep(0.01)
      end
  
      return True
  end
  
  def rq_wait_for_vacuum_object_not_detected(gripper_socket="1"):
      while (rq_is_vacuum_obj_detected(gripper_socket)):
          sleep(0.01)
      end
  end
  
  def rq_is_vacuum_obj_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_vacuum_obj_secured(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_vacuum_OBJ_object_secured(gOBJ)
  end
  
  def rq_is_vacuum_obj_in_suction(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
  
      if(is_vacuum_OBJ_object_in_motion(gOBJ)):
          return True
      else:
          return False
      end
  end
  
  def rq_is_vacuum_timeout(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
      sleep(0.008)
  
      if(gFLT ==6):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_in_motion(gOBJ):
      if (gOBJ == 0):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_detected(gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_vacuum_OBJ_object_secured(gOBJ):
      if (gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket="1"):
      rq_set_pos_spd_for(pressure, timeout, minimum, gripper_socket)
  end
  
  def rq_set_vacuum_and_wait(pressure, timeout, minimum, mode, gripper_socket="1"):
      rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
      gPRE = rq_get_var("PRE", 3, gripper_socket)
      while (gPRE != pressure):
          rq_set_pressure_timeout_minimum_vacuum(pressure, timeout, minimum, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  
      rq_set_gripper_mode(mode, gripper_socket)
      gMOD = rq_get_var("MOD", 3, gripper_socket)
      while (gMOD != mode):
          rq_set_gripper_mode(mode, gripper_socket)
          sleep(0.008)
          gMOD = rq_get_var("MOD", 3, gripper_socket)
     end
  end
  
  def is_FLT_vacuum_timeout(gFLT):
    if (gFLT == 6):
        return True
    end
  
    return False
  end
  
  def is_continuous_grip(maximum_vacuum):
    return maximum_vacuum == 0
  end
  
  def rq_vacuum_release(advanced_mode=False, shutoff_distance_cm=5, wait_for_object_released=True, gripper_socket="1"):
    local shutoff_distance = scale(shutoff_distance_cm, [0, 99], [0.00, 0.99])
    local pressure = 255
    local minimum = 0
    local timeout = 255
    rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket)
  end
  
  def rq_vacuum_release_raw(advanced_mode, pressure, minimum, timeout, shutoff_distance, wait_for_object_released, gripper_socket):
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
    # the communication driver reset the GTO bit
    rq_set_GTO_and_wait(1, gripper_socket)
  
    if wait_for_object_released:
      while (rq_is_vacuum_obj_detected(gripper_socket)):
  
        if advanced_mode:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
        else:
          rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
        end
  
        # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
        # the communication driver reset the GTO bit
        rq_set_GTO_and_wait(1, gripper_socket)
        sleep(0.01)
      end
    end
  
    if advanced_mode:
      startStopPumpOnDistanceTravelledThread(shutoff_distance, gripper_socket)
    end
  end
  
  def rq_vacuum_grip(advanced_mode=False, maximum_vacuum=60, minimum_vacuum=40, timeout_ms=3000, wait_for_object_detected=True, gripper_socket="1"):
    local pressure = scale(maximum_vacuum, [0, 100], [100, 0])
    local minimum = scale(minimum_vacuum, [0, 100], [100, 0])
    local timeout = scale(timeout_ms, [0, 25500], [0, 255])
    rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket)
    if wait_for_object_detected:
          suction_completed = rq_wait_for_vacuum_object_suction_complete(gripper_socket)
          if(not suction_completed):
              rq_set_var("GTO", 0, gripper_socket)
          end
    end
  end
  
  def rq_vacuum_grip_raw(advanced_mode, pressure, minimum, timeout, gripper_socket):
    stopStopPumpOnDistanceTravelledThread(gripper_socket)
    rq_reset_fault_and_activate(gripper_socket)
  
    if advanced_mode:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 1, gripper_socket)
    else:
      rq_set_vacuum_and_wait(pressure, timeout, minimum, 0, gripper_socket)
    end
  
    rq_set_GTO_and_wait(1, gripper_socket)
  end
  
  def rq_reset_fault_and_activate(gripper_socket):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(not is_FLT_no_fault(gFLT)):
          if(is_FLT_vacuum_timeout(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
          elif(is_FLT_faulted(gFLT)):
              rq_set_GTO_and_wait(0, gripper_socket)
              rq_set_var("ACT", 1, gripper_socket)
          end
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_set_GTO_and_wait(0, gripper_socket)
          rq_set_var("ACT", 1, gripper_socket)
      end
  end
  #################################################
  # End - Vacuum general functions
  #################################################
  vacuumGripCheckWarningTitle = "Vacuum grip check"
  vacuumGripCheckWarningMessage = "Vacuum gripper object lost"
  vacuumGripTimeoutTitle = "Vacuum gripper fault"
  vacuumGripTimeoutMessage = "Grip has timed out"
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: Robotiq_Grippers, 1.8.10.17249, Robotiq Inc.
  #   Type: Gripper
  rq_gripper_socket_ip_address = "127.0.0.1"
  rq_gripper_socket_port = 63352
  
  rq_comm_check_fail_counter = [0, 0, 0, 0]
  
  rq_read_act = [-1, -1, -1, -1]
  rq_read_gto = [-1, -1, -1, -1]
  rq_read_for = [-1, -1, -1, -1]
  rq_read_spe = [-1, -1, -1, -1]
  rq_read_obj = [-1, -1, -1, -1]
  rq_read_sta = [-1, -1, -1, -1]
  rq_read_flt = [-1, -1, -1, -1]
  rq_read_pos = [-1, -1, -1, -1]
  rq_read_pre = [-1, -1, -1, -1]
  rq_read_lbp = [-1, -1, -1, -1]
  rq_read_lrd = [-1, -1, -1, -1]
  rq_read_lbl = [-1, -1, -1, -1]
  rq_read_lgn = [-1, -1, -1, -1]
  rq_read_msc = [-1, -1, -1, -1]
  rq_read_mod = [-1, -1, -1, -1]
  rq_read_cou = [-1, -1, -1, -1]
  rq_read_ncy = [-1, -1, -1, -1]
  rq_read_dst = [-1, -1, -1, -1]
  rq_read_pco = [-1, -1, -1, -1]
  
  rq_string_initial_value = "N/A"
  
  rq_read_snu_1 = rq_string_initial_value
  rq_read_snu_2 = rq_string_initial_value
  rq_read_snu_3 = rq_string_initial_value
  rq_read_snu_4 = rq_string_initial_value
  
  rq_read_fwv_1 = rq_string_initial_value
  rq_read_fwv_2 = rq_string_initial_value
  rq_read_fwv_3 = rq_string_initial_value
  rq_read_fwv_4 = rq_string_initial_value
  
  rq_read_ver_1 = rq_string_initial_value
  rq_read_ver_2 = rq_string_initial_value
  rq_read_ver_3 = rq_string_initial_value
  rq_read_ver_4 = rq_string_initial_value
  
  rq_read_act_req = [True, True, True, True]
  rq_read_gto_req = [True, True, True, True]
  rq_read_for_req = [True, True, True, True]
  rq_read_spe_req = [True, True, True, True]
  rq_read_obj_req = [True, True, True, True]
  rq_read_sta_req = [True, True, True, True]
  rq_read_flt_req = [True, True, True, True]
  rq_read_pos_req = [True, True, True, True]
  rq_read_pre_req = [True, True, True, True]
  rq_read_lbp_req = [True, True, True, True]
  rq_read_lrd_req = [True, True, True, True]
  rq_read_lbl_req = [True, True, True, True]
  rq_read_lgn_req = [True, True, True, True]
  rq_read_msc_req = [True, True, True, True]
  rq_read_mod_req = [True, True, True, True]
  rq_read_cou_req = [True, True, True, True]
  rq_read_ncy_req = [True, True, True, True]
  rq_read_dst_req = [True, True, True, True]
  rq_read_pco_req = [True, True, True, True]
  
  rq_read_snu_1_req = False
  rq_read_snu_2_req = False
  rq_read_snu_3_req = False
  rq_read_snu_4_req = False
  
  rq_read_fwv_1_req = False
  rq_read_fwv_2_req = False
  rq_read_fwv_3_req = False
  rq_read_fwv_4_req = False
  
  rq_read_ver_1_req = False
  rq_read_ver_2_req = False
  rq_read_ver_3_req = False
  rq_read_ver_4_req = False
  
  rq_write_act_request = [False, False, False, False]
  rq_write_gto_request = [False, False, False, False]
  rq_write_atr_request = [False, False, False, False]
  rq_write_ard_request = [False, False, False, False]
  rq_write_pos_request = [False, False, False, False]
  rq_write_lbp_request = [False, False, False, False]
  rq_write_lrd_request = [False, False, False, False]
  rq_write_lbl_request = [False, False, False, False]
  rq_write_lgn_request = [False, False, False, False]
  rq_write_msc_request = [False, False, False, False]
  rq_write_mod_request = [False, False, False, False]
  
  rq_write_act = [-1, -1, -1, -1]
  rq_write_gto = [-1, -1, -1, -1]
  rq_write_atr = [-1, -1, -1, -1]
  rq_write_ard = [-1, -1, -1, -1]
  rq_write_for = [-1, -1, -1, -1]
  rq_write_spe = [-1, -1, -1, -1]
  rq_write_pos = [-1, -1, -1, -1]
  rq_write_lbp = [-1, -1, -1, -1]
  rq_write_lrd = [-1, -1, -1, -1]
  rq_write_lbl = [-1, -1, -1, -1]
  rq_write_lgn = [-1, -1, -1, -1]
  rq_write_msc = [-1, -1, -1, -1]
  rq_write_mod = [-1, -1, -1, -1]
  
  rq_write_act_previous = rq_write_act
  rq_write_gto_previous = rq_write_gto
  rq_write_atr_previous = rq_write_atr
  rq_write_ard_previous = rq_write_ard
  rq_write_for_previous = rq_write_for
  rq_write_spe_previous = rq_write_spe
  rq_write_pos_previous = rq_write_pos
  rq_write_lbp_previous = rq_write_lbp
  rq_write_lrd_previous = rq_write_lrd
  rq_write_lbl_previous = rq_write_lbl
  rq_write_lgn_previous = rq_write_lgn
  rq_write_msc_previous = rq_write_msc
  rq_write_mod_previous = rq_write_mod
  
  gripper_connected = [False, False, False, False]
  gripper_socket_open = [False, False, False, False]
  rq_comm_clear_socket_buffer_enabled = [True, True, True, True]
  rq_comm_check_counter = 0
  rq_gripper_communication_thread_started = False
  
  thread rq_gripper_communication():
      rq_comm_read_constants()
      rq_comm_read_variables()
      rq_comm_initialize_write_values()
  
      while(True):
          rq_comm_clear_socket_buffer()
          rq_comm_check()
          rq_comm_read_variables()
          rq_comm_write_variables()
  
          rq_gripper_communication_thread_started = True
          sleep(0.008)
      end
  end
  
  def rq_socket_to_index(gripper_socket="1"):
      # Patch in case gripper_socket is an integer
      gripper_socket_string = str_cat("", gripper_socket)
  
      if(gripper_socket_string == "1"):
          return 0
      elif(gripper_socket_string == "2"):
          return 1
      elif(gripper_socket_string == "3"):
          return 2
      elif(gripper_socket_string == "4"):
          return 3
      end
      return 0
  end
  
  def rq_index_to_socket(index=0):
      if(index == 0):
          return "1"
      elif(index == 1):
          return "2"
      elif(index == 2):
          return "3"
      elif(index == 3):
          return "4"
      end
      return "1"
  end
  
  def rq_comm_check():
      index = 0
      rq_comm_check_fail_counter_max = 99999
  
      if(rq_comm_check_counter < 50):
          rq_comm_check_counter = rq_comm_check_counter + 1
      else:
          rq_comm_check_counter = 0
  
          while(index <= 3):
              socket = rq_index_to_socket(index)
  
              if(gripper_connected[index]):
                  # Patch in case gripper_socket is an integer
                  gripper_socket_string = str_cat("", socket)
  
                  sid_list = rq_get_sid(socket)
                  is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
                  if(is_gripper_in_sid_list):
                      rq_comm_check_fail_counter[index] = 0
                  else:
                      rq_comm_check_fail_counter[index] = rq_comm_check_fail_counter[index] + 1
                  end
  
                  if(rq_comm_check_fail_counter[index] > rq_comm_check_fail_counter_max):
                      message = str_cat("Communication lost with Robotiq's Gripper Slave ID ", gripper_socket_string)
                      popup(message, "Communication Error", False, True, True)
                  end
              end
              index = index + 1
          end
      end
  end
  
  def rq_init_comm_if_connected(gripper_sid=9, gripper_socket="1"):
      if(not is_gripper_socket_open(gripper_socket)):
        open_gripper_socket(gripper_socket)
      end
  
      socket_sid_set = rq_set_sid(gripper_sid, gripper_socket)
  
      if(socket_sid_set):
          # Patch in case gripper_socket is an integer
          gripper_socket_string = str_cat("", gripper_socket)
  
          sid_list = rq_get_sid(gripper_socket)
          is_gripper_in_sid_list = rq_is_gripper_in_sid_list(gripper_socket_string, sid_list)
  
          if(is_gripper_in_sid_list):
              rq_set_gripper_connected(gripper_socket_string)
              return True
          end
      end
  
      return False
  end
  
  def open_gripper_socket(gripper_socket="1"):
      is_open = socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
      set_gripper_socket_open(gripper_socket, is_open)
  end
  
  def rq_close_gripper_socket(gripper_socket="1"):
      socket_close(gripper_socket)
      set_gripper_socket_open(gripper_socket, False)
      rq_set_gripper_connected(gripper_socket, False)
  end
  
  
  def is_gripper_socket_open(gripper_socket="1"):
      return gripper_socket_open[rq_socket_to_index(gripper_socket)]
  end
  
  def set_gripper_socket_open(gripper_socket, is_open):
      gripper_socket_open[rq_socket_to_index(gripper_socket)] = is_open
  end
  
  def rq_set_gripper_connected(gripper_socket="1", connected = True):
      gripper_connected[rq_socket_to_index(gripper_socket)] = connected
  end
  
  def rq_is_gripper_connected(gripper_id="1"):
      return gripper_connected[rq_socket_to_index(gripper_id)]
  end
  
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
      socket_set_var("SID", gripper_sid,  gripper_socket)
      ack = socket_read_byte_list(3, gripper_socket)
      return is_ack(ack)
  end
  
  def rq_get_sid(gripper_socket="1"):
      socket_send_string("GET SID", gripper_socket)
      sid_list = socket_read_byte_list(17, gripper_socket)
      return sid_list
  end
  
  def rq_wait_for_gripper_connected():
      gripper_socket = "gripper_conn_socket"
      socket_open(rq_gripper_socket_ip_address, rq_gripper_socket_port, gripper_socket)
  
      remainingRetries = 2000
      sid_list = rq_get_sid(gripper_socket)
      gripper_is_connected = rq_is_any_gripper_connected(sid_list)
  
      while(not gripper_is_connected and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          sid_list = rq_get_sid(gripper_socket)
          gripper_is_connected = rq_is_any_gripper_connected(sid_list)
      end
  
      socket_close(gripper_socket)
  end
  
  def rq_is_any_gripper_connected(sid_list):
      is_gripper_1_connected = rq_is_gripper1_in_sid_list(sid_list)
      is_gripper_2_connected = rq_is_gripper2_in_sid_list(sid_list)
      is_gripper_3_connected = rq_is_gripper3_in_sid_list(sid_list)
      is_gripper_4_connected = rq_is_gripper4_in_sid_list(sid_list)
  
      return is_gripper_1_connected or is_gripper_2_connected or is_gripper_3_connected or is_gripper_4_connected
  end
  
  def rq_is_gripper_ascii_in_sid_list(gripper_ascii_sid, sid_list):
      sid_list_length = sid_list[0]
      sid_list_empty_length = 2
  
      if (sid_list_length <= sid_list_empty_length):
          return False
      end
  
      sid1 = sid_list[2]
      sid2 = sid_list[5]
      sid3 = sid_list[8]
      sid4 = sid_list[11]
  
      return sid1 == gripper_ascii_sid or sid2 == gripper_ascii_sid or sid3 == gripper_ascii_sid or sid4 == gripper_ascii_sid
  end
  
  def rq_is_gripper_in_sid_list(gripper_socket_string, sid_list):
      if(gripper_socket_string == "1"):
          return rq_is_gripper1_in_sid_list(sid_list)
      elif(gripper_socket_string == "2"):
          return rq_is_gripper2_in_sid_list(sid_list)
      elif(gripper_socket_string == "3"):
          return rq_is_gripper3_in_sid_list(sid_list)
      elif(gripper_socket_string == "4"):
          return rq_is_gripper4_in_sid_list(sid_list)
      end
      return False
  end
  
  def rq_is_gripper1_in_sid_list(sid_list):
      gripper_1_sid_ascii = 57
      return rq_is_gripper_ascii_in_sid_list(gripper_1_sid_ascii, sid_list)
  end
  
  def rq_is_gripper2_in_sid_list(sid_list):
      gripper_2_sid_ascii = 50
      return rq_is_gripper_ascii_in_sid_list(gripper_2_sid_ascii, sid_list)
  end
  
  def rq_is_gripper3_in_sid_list(sid_list):
      gripper_3_sid_ascii = 51
      return rq_is_gripper_ascii_in_sid_list(gripper_3_sid_ascii, sid_list)
  end
  
  def rq_is_gripper4_in_sid_list(sid_list):
      gripper_4_sid_ascii = 52
      return rq_is_gripper_ascii_in_sid_list(gripper_4_sid_ascii, sid_list)
  end
  
  def rq_comm_clear_socket_buffer():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index] and rq_comm_clear_socket_buffer_enabled[index]):
              byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              while(byte_in_buffer[0] >= 1):
                  byte_in_buffer = socket_read_byte_list(1, socket, 0.002)
              end
              rq_comm_clear_socket_buffer_enabled[index] = False
          end
          index = index + 1
      end
  end
  
  def rq_comm_initialize_write_values():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act[index] = rq_read_act[index]
                  rq_write_act_previous[index] = rq_read_act[index]
              elif(rq_write_act_previous[index] == -1 and rq_read_act[index] != -1):
                  rq_write_act_previous[index] = rq_read_act[index]
              end
  
              if(rq_write_gto[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto[index] = rq_read_gto[index]
                  rq_write_gto_previous[index] = rq_read_gto[index]
              elif(rq_write_gto_previous[index] == -1 and rq_read_gto[index] != -1):
                  rq_write_gto_previous[index] = rq_read_gto[index]
              end
  
              if(rq_write_for[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for[index] = rq_read_for[index]
                  rq_write_for_previous[index] = rq_read_for[index]
              elif(rq_write_for_previous[index] == -1 and rq_read_for[index] != -1):
                  rq_write_for_previous[index] = rq_read_for[index]
              end
  
              if(rq_write_spe[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe[index] = rq_read_spe[index]
                  rq_write_spe_previous[index] = rq_read_spe[index]
              elif(rq_write_spe_previous[index] == -1 and rq_read_spe[index] != -1):
                  rq_write_spe_previous[index] = rq_read_spe[index]
              end
  
              if(rq_write_pos[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos[index] = rq_read_pos[index]
                  rq_write_pos_previous[index] = rq_read_pos[index]
              elif(rq_write_pos_previous[index] == -1 and rq_read_pos[index] != -1):
                  rq_write_pos_previous[index] = rq_read_pos[index]
              end
  
              if(rq_write_lbp[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp[index] = rq_read_lbp[index]
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              elif(rq_write_lbp_previous[index] == -1 and rq_read_lbp[index] != -1):
                  rq_write_lbp_previous[index] = rq_read_lbp[index]
              end
  
              if(rq_write_lrd[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd[index] = rq_read_lrd[index]
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              elif(rq_write_lrd_previous[index] == -1 and rq_read_lrd[index] != -1):
                  rq_write_lrd_previous[index] = rq_read_lrd[index]
              end
  
              if(rq_write_lbl[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl[index] = rq_read_lbl[index]
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              elif(rq_write_lbl_previous[index] == -1 and rq_read_lbl[index] != -1):
                  rq_write_lbl_previous[index] = rq_read_lbl[index]
              end
  
              if(rq_write_lgn[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn[index] = rq_read_lgn[index]
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              elif(rq_write_lgn_previous[index] == -1 and rq_read_lgn[index] != -1):
                  rq_write_lgn_previous[index] = rq_read_lgn[index]
              end
  
              if(rq_write_msc[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc[index] = rq_read_msc[index]
                  rq_write_msc_previous[index] = rq_read_msc[index]
              elif(rq_write_msc_previous[index] == -1 and rq_read_msc[index] != -1):
                  rq_write_msc_previous[index] = rq_read_msc[index]
              end
  
              if(rq_write_mod[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod[index] = rq_read_mod[index]
                  rq_write_mod_previous[index] = rq_read_mod[index]
              elif(rq_write_mod_previous[index] == -1 and rq_read_mod[index] != -1):
                  rq_write_mod_previous[index] = rq_read_mod[index]
              end
  
          end
          index = index + 1
      end
  end
  
  def rq_comm_set_var(var, value=0, gripper_socket="1"):
      socket_set_var(var, value, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_set_pos_spe_for(pos=0, speed=0, force=0, gripper_socket="1"):
      socket_send_string("SET POS", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(pos, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("SPE", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(speed, gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string("FOR", gripper_socket)
      socket_send_byte(32, gripper_socket)
      socket_send_string(force, gripper_socket)
      socket_send_byte(10, gripper_socket)
      return socket_read_byte_list(3, gripper_socket)
  end
  
  def rq_comm_read_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_read_act_req[index]):
                  rq_read_act[index] = socket_get_var("ACT", socket)
                  rq_read_act_req[index] = False
              end
  
              if(rq_read_gto_req[index]):
                  rq_read_gto[index] = socket_get_var("GTO", socket)
                  rq_read_gto_req[index] = False
              end
  
              if(rq_read_pre_req[index]):
                  rq_read_pre[index] = socket_get_var("PRE", socket)
                  rq_read_pre_req[index] = False
              end
  
              if(rq_read_pos_req[index]):
                  rq_read_pos[index] = socket_get_var("POS", socket)
                  rq_read_pos_req[index] = False
              end
  
              if(rq_read_spe_req[index]):
                  rq_read_spe[index] = socket_get_var("SPE", socket)
                  rq_read_spe_req[index] = False
              end
  
              if(rq_read_for_req[index]):
                  rq_read_for[index] = socket_get_var("FOR", socket)
                  rq_read_for_req[index] = False
              end
  
              if(rq_read_obj_req[index]):
                  rq_read_obj[index] = socket_get_var("OBJ", socket)
                  rq_read_obj_req[index] = False
              end
  
              if(rq_read_sta_req[index]):
                  rq_read_sta[index] = socket_get_var("STA", socket)
                  rq_read_sta_req[index] = False
              end
  
              if(rq_read_mod_req[index]):
                  rq_read_mod[index] = socket_get_var("MOD", socket)
                  rq_read_mod_req[index] = False
              end
  
              if(rq_read_flt_req[index]):
                  rq_read_flt[index] = socket_get_var("FLT",socket)
                  rq_read_flt_req[index] = False
              end
  
              if(rq_read_lbp_req[index]):
                  rq_read_lbp[index] = socket_get_var("LBP", socket)
                  rq_read_lbp_req[index] = False
              end
  
              if(rq_read_lrd_req[index]):
                  rq_read_lrd[index] = socket_get_var("LRD", socket)
                  rq_read_lrd_req[index] = False
              end
  
              if(rq_read_lbl_req[index]):
                  rq_read_lbl[index] = socket_get_var("LBL",socket)
                  rq_read_lbl_req[index] = False
              end
  
              if(rq_read_lgn_req[index]):
                  rq_read_lgn[index] = socket_get_var("LGN", socket)
                  rq_read_lgn_req[index] = False
              end
  
              if(rq_read_msc_req[index]):
                  rq_read_msc[index] = socket_get_var("MSC", socket)
                  rq_read_msc_req[index] = False
              end
  
              if(rq_read_cou_req[index]):
                  rq_read_cou[index] = socket_get_var("COU", socket)
                  rq_read_cou_req[index] = False
              end
  
              if(rq_read_ncy_req[index]):
                  rq_read_ncy[index] = socket_get_var("NCY", socket)
                  rq_read_ncy_req[index] = False
              end
  
              if(rq_read_dst_req[index]):
                  rq_read_dst[index] = socket_get_var("DST", socket)
                  rq_read_dst_req[index] = False
              end
  
              if(rq_read_pco_req[index]):
                  rq_read_pco[index] = socket_get_var("PCO", socket)
                  rq_read_pco_req[index] = False
              end
          end
          index = index + 1
      end
  end
  
  def rq_comm_read_constants():
  
      if(gripper_connected[0]):
          while(rq_read_snu_1 == rq_string_initial_value):
              socket_send_string("GET SNU", "1")
              rq_read_snu_1 = socket_read_string("1")
          end
  
          while(rq_read_fwv_1 == rq_string_initial_value):
              socket_send_string("GET FWV", "1")
              rq_read_fwv_1 = socket_read_string("1")
          end
  
          while(rq_read_ver_1 == rq_string_initial_value):
              socket_send_string("GET VER", "1")
              rq_read_ver_1 = socket_read_string("1")
          end
      end
  
      if(gripper_connected[1]):
          while(rq_read_snu_2 == rq_string_initial_value):
              socket_send_string("GET SNU", "2")
              rq_read_snu_2 = socket_read_string("2")
          end
  
          while(rq_read_fwv_2 == rq_string_initial_value):
              socket_send_string("GET FWV", "2")
              rq_read_fwv_2 = socket_read_string("2")
          end
  
          while(rq_read_ver_2 == rq_string_initial_value):
              socket_send_string("GET VER", "2")
              rq_read_ver_2 = socket_read_string("2")
          end
      end
  
      if(gripper_connected[2]):
          while(rq_read_snu_3 == rq_string_initial_value):
              socket_send_string("GET SNU", "3")
              rq_read_snu_3 = socket_read_string("3")
          end
  
          while(rq_read_fwv_3 == rq_string_initial_value):
              socket_send_string("GET FWV", "3")
              rq_read_fwv_3 = socket_read_string("3")
          end
  
          while(rq_read_ver_3 == rq_string_initial_value):
              socket_send_string("GET VER", "3")
              rq_read_ver_3 = socket_read_string("3")
          end
      end
  
      if(gripper_connected[3]):
          while(rq_read_snu_4 == rq_string_initial_value):
              socket_send_string("GET SNU", "4")
              rq_read_snu_4 = socket_read_string("4")
          end
  
          while(rq_read_fwv_4 == rq_string_initial_value):
              socket_send_string("GET FWV", "4")
              rq_read_fwv_4 = socket_read_string("4")
          end
  
          while(rq_read_ver_4 == rq_string_initial_value):
              socket_send_string("GET VER", "4")
              rq_read_ver_4 = socket_read_string("4")
          end
      end
  end
  
  def rq_comm_write_variables():
      index = 0
  
      while(index <= 3):
          socket = rq_index_to_socket(index)
  
          if(gripper_connected[index]):
  
              if(rq_write_act_request[index]):
                  if(is_ack(rq_comm_set_var("ACT", rq_write_act[index], socket))):
                      rq_write_act_previous[index] = rq_write_act[index]
                      rq_write_act_request[index] = False
                  end
              end
  
              if(rq_write_gto_request[index]):
                  if(is_ack(rq_comm_set_var("GTO", rq_write_gto[index], socket))):
                      rq_write_gto_previous[index] = rq_write_gto[index]
                      rq_write_gto_request[index] = False
                  end
              end
  
              if(rq_write_atr_request[index]):
                  if(is_ack(rq_comm_set_var("ATR", rq_write_atr[index], socket))):
                      rq_write_atr_previous[index] = rq_write_atr[index]
                      rq_write_atr_request[index] = False
                  end
              end
  
              if(rq_write_ard_request[index]):
                  if(is_ack(rq_comm_set_var("ARD", rq_write_ard[index], socket))):
                      rq_write_ard_previous[index] = rq_write_ard[index]
                      rq_write_ard_request[index] = False
                  end
              end
  
              if(rq_write_pos_request[index]):
                  if(is_ack(rq_comm_set_pos_spe_for(rq_write_pos[index], rq_write_spe[index], rq_write_for[index], socket))):
                      rq_write_pos_previous[index] = rq_write_pos[index]
                      rq_write_spe_previous[index] = rq_write_spe[index]
                      rq_write_for_previous[index] = rq_write_for[index]
                      rq_write_pos_request[index] = False
                  end
              end
  
              if(rq_write_lbp_request[index]):
                  if(is_ack(rq_comm_set_var("LBP", rq_write_lbp[index], socket))):
                      rq_write_lbp_previous[index] = rq_write_lbp[index]
                      rq_write_lbp_request[index] = False
                  end
              end
  
              if(rq_write_lrd_request[index]):
                  if(is_ack(rq_comm_set_var("LRD", rq_write_lrd[index], socket))):
                      rq_write_lrd_previous[index] = rq_write_lrd[index]
                      rq_write_lrd_request[index] = False
                  end
              end
  
              if(rq_write_lbl_request[index]):
                  if(is_ack(rq_comm_set_var("LBL", rq_write_lbl[index], socket))):
                      rq_write_lbl_previous[index] = rq_write_lbl[index]
                      rq_write_lbl_request[index] = False
                  end
              end
  
              if(rq_write_lgn_request[index]):
                  if(is_ack(rq_comm_set_var("LGN", rq_write_lgn[index], socket))):
                      rq_write_lgn_previous[index] = rq_write_lgn[index]
                      rq_write_lgn_request[index] = False
                  end
              end
  
              if(rq_write_msc_request[index]):
                  if(is_ack(rq_comm_set_var("MSC", rq_write_msc[index], socket))):
                      rq_write_msc_previous[index] = rq_write_msc[index]
                      rq_write_msc_request[index] = False
                  end
              end
  
              if(rq_write_mod_request[index]):
                  if(is_ack(rq_comm_set_var("MOD", rq_write_mod[index], socket))):
                      rq_write_mod_previous[index] = rq_write_mod[index]
                      rq_write_mod_request[index] = False
                  end
              end
          end
          index = index + 1
      end
  end
  
  def rq_activate(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_reset(gripper_socket)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
              rq_reset(gripper_socket)
              sleep(0.008)
          end
  
          rq_set_var("ACT",1, gripper_socket)
      end
  end
  
  def rq_activate_and_wait(gripper_socket="1"):
      if (not rq_is_gripper_activated(gripper_socket)):
          rq_activate(gripper_socket)
          sleep(1.0)
  
          while(not rq_get_var("ACT", 1, gripper_socket) == 1 or not rq_get_var("STA", 1, gripper_socket) == 3):
              sleep(0.1)
          end
  
          sleep(0.5)
      end
  end
  
  def rq_activate_all_grippers(reset=False):
      if(gripper_connected[0]):
          rq_reset_and_activate("1", reset)
      end
  
      if(gripper_connected[1]):
          rq_reset_and_activate("2", reset)
      end
  
      if(gripper_connected[2]):
          rq_reset_and_activate("3", reset)
      end
  
      if(gripper_connected[3]):
          rq_reset_and_activate("4", reset)
      end
  end
  
  def rq_reset_and_activate(gripper_socket="1", reset=False):
      if(reset):
          rq_reset(gripper_socket)
          rq_activate_and_wait(gripper_socket)
      elif(not rq_is_gripper_activated(gripper_socket)):
          rq_activate_and_wait(gripper_socket)
      end
  end
  
  def rq_reset(gripper_socket="1"):
      rq_set_var("ACT", 0, gripper_socket)
      rq_set_var("ATR", 0, gripper_socket)
  
      while(not rq_get_var("ACT", 1, gripper_socket) == 0 or not rq_get_var("STA", 1, gripper_socket) == 0):
          rq_set_var("ACT", 0, gripper_socket)
          rq_set_var("ATR", 0, gripper_socket)
          sleep(0.008)
      end
  
      sleep(0.5)
  end
  
  def rq_auto_release_open_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",0, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_auto_release_close_and_wait(gripper_socket="1"):
      rq_set_var("ATR",0, gripper_socket)
      rq_set_var("ARD",1, gripper_socket)
      rq_set_var("ACT",1, gripper_socket)
      sleep(0.1)
      rq_set_var("ATR",1, gripper_socket)
  
      rq_wait_autorelease_completed(gripper_socket)
  end
  
  def rq_wait_autorelease_completed(gripper_socket="1"):
      remainingRetries = 20
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_in_progress(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  
      remainingRetries = 100
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      while(not is_FLT_autorelease_completed(gFLT) and remainingRetries > 0):
          remainingRetries = remainingRetries - 1
          gFLT = rq_get_var("FLT", 2, gripper_socket)
          sleep(0.1)
      end
  end
  
  def rq_set_force(force, gripper_socket="1"):
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
      rq_set_var("FOR", force, gripper_socket)
  end
  
  def rq_set_speed(speed, gripper_socket="1"):
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      rq_set_var("SPE", speed, gripper_socket)
  end
  
  def rq_open(gripper_socket="1"):
      rq_move(0, gripper_socket)
  end
  
  def rq_close(gripper_socket="1"):
      rq_move(255, gripper_socket)
  end
  
  def rq_open_and_wait(gripper_socket="1"):
      rq_move_and_wait(0, gripper_socket)
  end
  
  def rq_close_and_wait(gripper_socket="1"):
      rq_move_and_wait(255, gripper_socket)
  end
  
  def rq_move(pos, gripper_socket="1"):
      rq_set_pos(pos, gripper_socket)
      rq_go_to(gripper_socket)
  end
  
  def rq_move_and_wait(pos, gripper_socket="1"):
      rq_move(pos, gripper_socket)
  
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
      end
  end
  
  def rq_wait_for_pos_request(pos, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_var("POS", pos, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_pos_spe_for_request(pos, speed, force, gripper_socket="1"):
      gPRE = rq_get_var("PRE", 3, gripper_socket)
  
      while (gPRE != pos):
          rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
          sleep(0.008)
          gPRE = rq_get_var("PRE", 3, gripper_socket)
      end
  end
  
  def rq_wait_for_pos(pos, gripper_socket="1"):
      rq_wait_for_pos_request(pos, gripper_socket)
  
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          # wait for motion completed
          sleep(0.008)
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait(gripper_socket="1"):
      # Wait for the gripper motion to complete
      while (not rq_is_motion_complete(gripper_socket)):
          sleep(0.008)
          # The following patch is for Robotiq's Camera issue when communication is lost, but not the activation
          # the communication driver reset the GTO bit
          rq_set_var("GTO", 1, gripper_socket)
      end
  end
  
  def rq_wait_for_object_detected(gripper_socket="1"):
      # Wait the object detection
      while (not rq_is_object_detected(gripper_socket)):
          sleep(0.008)
      end
  end
  
  # set the position
  def rq_set_pos(pos, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      rq_set_var("POS", pos, gripper_socket)
      rq_wait_for_pos_request(pos, gripper_socket)
  end
  
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
      pos = floor(scale(pos, [0, 255], [0.0, 255.0]))
      speed = floor(scale(speed, [0, 255], [0.0, 255.0]))
      force = floor(scale(force, [0, 255], [0.0, 255.0]))
  
      rq_set_pos_spe_for_var(pos, speed, force, gripper_socket)
  end
  
  def rq_set_gripper_max_current_mA(current_mA, gripper_socket="1"):
      current = floor(current_mA / 10)
  
      rq_set_var("MSC", current, gripper_socket)
      current_read = rq_get_var("MSC", 1, gripper_socket)
  
      while(current_read != current):
          rq_set_var("MSC", current, gripper_socket)
          current_read = rq_get_var("MSC", 1, gripper_socket)
      end
  end
  
  def rq_set_gripper_mode(mode, gripper_socket="1"):
      rq_set_var("MOD", mode, gripper_socket)
  end
  
  def rq_set_gripper_max_cur(current_mA, gripper_socket="1"):
      rq_set_gripper_max_current_mA(current_mA, gripper_socket)
  end
  
  def rq_get_gripper_max_current_mA(gripper_socket="1"):
      current = rq_get_var("MSC", 1, gripper_socket)
  
      if(current == -1):
          current_mA = current
      else:
          current_mA = current * 10
      end
  
      return current_mA
  end
  
  def rq_get_gripper_max_cur(gripper_socket="1"):
      return rq_get_gripper_max_current_mA(gripper_socket)
  end
  
  def rq_set_max_current_for_all_grippers():
      current_mA = rq_get_max_current_mA()
  
      if(gripper_connected[0]):
          rq_set_gripper_max_current_mA(current_mA, "1")
      end
  
      if(gripper_connected[1]):
          rq_set_gripper_max_current_mA(current_mA, "2")
      end
  
      if(gripper_connected[2]):
          rq_set_gripper_max_current_mA(current_mA, "3")
      end
  
      if(gripper_connected[3]):
          rq_set_gripper_max_current_mA(current_mA, "4")
      end
  end
  
  def rq_get_max_current_mA():
      max_current_mA = 0
  
      if(rq_current_limit_enabled):
          nb_connected_grippers = rq_get_nb_connected_grippers()
  
          if(nb_connected_grippers == 1):
              max_current_mA = 600
          elif(nb_connected_grippers > 1):
              max_current_mA = 450
          end
      else:
  
      end
  
      return max_current_mA
  end
  
  def rq_get_nb_connected_grippers():
      nb_connected_grippers = 0
  
      if(gripper_connected[0]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[1]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[2]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      if(gripper_connected[3]):
          nb_connected_grippers = nb_connected_grippers + 1
      end
  
      return nb_connected_grippers
  end
  
  def rq_list_of_bytes_to_value(list_of_bytes):
      value = -1
  
      # response list length
      if (list_of_bytes[0] == 1):
          value = list_of_bytes[1] - 48
      elif (list_of_bytes[0] == 2):
          value = (list_of_bytes[1] - 48) * 10 + (list_of_bytes[2] - 48)
      elif (list_of_bytes[0] == 3):
          value = (list_of_bytes[1] - 48) * 100 + (list_of_bytes[2] - 48) * 10 + (list_of_bytes[3] - 48)
      end
  
      return value
  end
  
  def rq_is_motion_complete(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_gripper_at_position(gOBJ) or is_OBJ_object_detected(gOBJ)
  end
  
  def rq_is_gripper_activated(gripper_socket="1"):
      gSTA = rq_get_var("STA", 1, gripper_socket)
      sleep(0.008)
      return is_STA_gripper_activated(gSTA)
  end
  
  def rq_is_object_detected(gripper_socket="1"):
      gOBJ = rq_get_var("OBJ", 1, gripper_socket)
      sleep(0.008)
      return is_OBJ_object_detected(gOBJ)
  end
  
  def rq_current_pos(gripper_socket="1"):
      gPOS = rq_get_var("POS", 1, gripper_socket)
      sleep(0.008)
      return gPOS
  end
  
  def rq_motor_current(gripper_socket="1"):
      rq_current = rq_get_var("COU", 1, gripper_socket)
      sleep(0.008)
      return rq_current * 10
  end
  
  def rq_print_connected_grippers():
      if(gripper_connected[0]):
          textmsg("Gripper 1 : ", "connected and socket open.")
      end
  
      if (gripper_connected[1]):
          textmsg("Gripper 2 : ", "connected and socket open.")
      end
  
      if (gripper_connected[2]):
          textmsg("Gripper 3 : ", "connected and socket open.")
      end
  
      if (gripper_connected[3]):
          textmsg("Gripper 4 : ", "connected and socket open.")
      end
  end
  
  def rq_print_gripper_fault_code(gripper_socket="1"):
      gFLT = rq_get_var("FLT", 2, gripper_socket)
  
      if(is_FLT_no_fault(gFLT)):
          textmsg("Gripper Fault : ", "No Fault (0x00)")
      elif (is_FLT_action_delayed(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to performing the action (0x05)")
      elif (is_FLT_not_activated(gFLT)):
          textmsg("Gripper Fault : ", "Priority Fault: The activation bit must be set prior to performing the action (0x07)")
      elif (is_FLT_over_temperature(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: Maximum operating temperature exceeded (≥ 85°C internally), let cool down (below 80°C) (0x08)")
      elif (is_FLT_no_communication(gFLT)):
          textmsg("Gripper Fault : ", "Minor Fault: No communication during at least 1 second (0x09)")
      elif (is_FLT_under_voltage(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Under minimum operating voltage (0x0A)")
      elif (is_FLT_autorelease_in_progress(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release in progress (0x0B)")
      elif (is_FLT_internal_fault(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Internal fault; contact support@robotiq.com (0x0C)")
      elif (is_FLT_activation_error(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Activation fault; verify that no interference or other error occurred (0x0D)")
      elif (is_FLT_overcurrent(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Overcurrent triggered (0x0E)")
      elif (is_FLT_autorelease_completed(gFLT)):
          textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
      else:
          textmsg("Gripper Fault : ", "Unknown Fault")
      end
  end
  
  def rq_print_gripper_num_cycles(gripper_socket="1"):
      num_cycles = rq_get_var("NCY", 1, gripper_socket)
  
      if(num_cycles == -1):
          textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
      else:
          textmsg("Gripper Cycle Number : ", num_cycles)
      end
  end
  
  def rq_print_gripper_driver_state(gripper_socket="1"):
      driver_state = rq_get_var("DST", 1, gripper_socket)
  
      if(driver_state == 0):
          textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
      elif(driver_state == 1):
          textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
      elif(driver_state == 2):
          textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
      elif(driver_state == 3):
          textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
      else:
          textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
      end
  end
  
  def rq_print_gripper_serial_number(gripper_socket="1"):
      serial_number = rq_get_var_string("SNU", 1, gripper_socket)
      textmsg("Gripper Serial Number : ", serial_number)
  end
  
  def rq_print_gripper_firmware_version(gripper_socket="1"):
      firmware_version = rq_get_var_string("FWV", 1, gripper_socket)
      textmsg("Gripper Firmware Version : ", firmware_version)
  end
  
  def rq_print_gripper_driver_version(gripper_socket="1"):
      driver_version = rq_get_var_string("VER", 1, gripper_socket)
      textmsg("Gripper Driver Version : ", driver_version)
  end
  
  def rq_print_gripper_connection_state(gripper_socket="1"):
      connection_state = rq_get_var("PCO", 1, gripper_socket)
  
      if (connection_state == 0):
          textmsg("Gripper Connection State : ", "No connection problem detected")
      else:
          textmsg("Gripper Connection State : ", "Connection problem detected")
      end
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  
      # list length is not 3
      if (list_of_bytes[0] != 3):
          return False
      end
  
      # first byte not is 'a'?
      if (list_of_bytes[1] != 97):
          return False
      end
  
      # first byte not is 'c'?
      if (list_of_bytes[2] != 99):
          return False
      end
  
      # first byte not is 'k'?
      if (list_of_bytes[3] != 107):
          return False
      end
  
      return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
      if (is_ack(list_of_bytes)):
          return False
      else:
          return True
      end
  end
  
  def is_STA_gripper_activated (gSTA):
      if (gSTA == 3):
          return True
      end
  
      return False
  end
  
  def is_OBJ_object_detected (gOBJ):
      if (gOBJ == 1 or gOBJ == 2):
          return True
      end
  
      return False
  end
  
  def is_OBJ_gripper_at_position (gOBJ):
      if (gOBJ == 3):
          return True
      end
  
      return False
  end
  
  def is_not_OBJ_gripper_at_position (gOBJ):
      if (is_OBJ_gripper_at_position(gOBJ)):
          return False
      else:
          return True
      end
  end
  
  #### GTO Section ####
  def rq_stop(gripper_socket="1"):
      rq_set_var("GTO", 0, gripper_socket)
  end
  
  def rq_set_GTO_and_wait(value, gripper_socket="1"):
      rq_set_var("GTO" ,value, gripper_socket)
      while(not is_GTO(value, rq_get_var("GTO", 1, gripper_socket))):
        sleep(0.008)
      end
  end
  
  def rq_go_to(gripper_socket="1"):
      rq_set_var("GTO", 1, gripper_socket)
  end
  
  
  def is_GTO(goto_value, rGTO):
      return rGTO == goto_value
  end
  #### GTO Section ####
  
  def is_FLT_no_fault(gFLT):
      return gFLT == 0
  end
  
  def is_FLT_warning(gFLT):
      return gFLT >= 1 and gFLT <= 7
  end
  
  def is_FLT_faulted(gFLT):
      return gFLT >= 8
  end
  
  def is_FLT_action_delayed(gFLT):
      return gFLT == 5
  end
  
  def is_FLT_not_activated(gFLT):
      return gFLT == 7
  end
  
  def is_FLT_over_temperature(gFLT):
      return gFLT == 8
  end
  
  def is_FLT_no_communication(gFLT):
      return gFLT == 9
  end
  
  def is_FLT_under_voltage(gFLT):
      return gFLT == 10
  end
  
  def is_FLT_autorelease_in_progress(gFLT):
      return gFLT == 11
  end
  
  def is_FLT_internal_fault(gFLT):
      return gFLT == 12
  end
  
  def is_FLT_activation_error(gFLT):
      return gFLT == 13
  end
  
  def is_FLT_overcurrent(gFLT):
      return gFLT == 14
  end
  
  def is_FLT_autorelease_completed(gFLT):
      return gFLT == 15
  end
  
  def rq_set_var(var_name, var_value, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      if (var_name == "ACT"):
          rq_write_act[index] = var_value
          rq_write_act_request[index] = True
      elif (var_name == "GTO"):
          rq_write_gto[index] = var_value
          rq_write_gto_request[index] = True
      elif (var_name == "ATR"):
          rq_write_atr[index] = var_value
          rq_write_atr_request[index] = True
      elif (var_name == "ARD"):
          rq_write_ard[index] = var_value
          rq_write_ard_request[index] = True
      elif (var_name == "FOR"):
          rq_write_for[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "SPE"):
          rq_write_spe[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "POS"):
          rq_write_pos[index] = var_value
          rq_write_pos_request[index] = True
      elif (var_name == "LBP"):
          rq_write_lbp[index] = var_value
          rq_write_lbp_request[index] = True
      elif (var_name == "LRD"):
          rq_write_lrd[index] = var_value
          rq_write_lrd_request[index] = True
      elif (var_name == "LBL"):
          rq_write_lbl[index] = var_value
          rq_write_lbl_request[index] = True
      elif (var_name == "LGN"):
          rq_write_lgn[index] = var_value
          rq_write_lgn_request[index] = True
      elif (var_name == "MSC"):
          rq_write_msc[index] = var_value
          rq_write_msc_request[index] = True
      elif (var_name == "MOD"):
          rq_write_mod[index] = var_value
          rq_write_mod_request[index] = True
      end
  
      exit_critical
  
      if (var_name == "ACT"):
          while(rq_write_act_request[index]):
              sleep(0.008)
          end
      elif (var_name == "GTO"):
          while(rq_write_gto_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ATR"):
          while(rq_write_atr_request[index]):
              sleep(0.008)
          end
      elif (var_name == "ARD"):
          while(rq_write_ard_request[index]):
              sleep(0.008)
          end
      elif (var_name == "FOR"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "SPE"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "POS"):
          while(rq_write_pos_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBP"):
          while(rq_write_lbp_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LRD"):
          while(rq_write_lrd_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LBL"):
          while(rq_write_lbl_request[index]):
              sleep(0.008)
          end
      elif (var_name == "LGN"):
          while(rq_write_lgn_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MSC"):
          while(rq_write_msc_request[index]):
              sleep(0.008)
          end
      elif (var_name == "MOD"):
          while(rq_write_mod_request[index]):
              sleep(0.008)
          end
      end
  end
  
  def rq_set_pos_spe_for_var(pos, speed, force, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
  
      enter_critical
  
      rq_write_for[index] = force
      rq_write_spe[index] = speed
      rq_write_pos[index] = pos
      rq_write_pos_request[index] = True
  
      exit_critical
  end
  
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = -1
  
      if (var_name == "ACT"):
          enter_critical
          rq_read_act_req[index] = True
          exit_critical
          while(rq_read_act_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_act[index]
  
      elif (var_name == "GTO"):
          enter_critical
          rq_read_gto_req[index] = True
          exit_critical
          while(rq_read_gto_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_gto[index]
  
      elif (var_name == "FOR"):
          enter_critical
          rq_read_for_req[index] = True
          exit_critical
          while(rq_read_for_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_for[index]
  
      elif (var_name == "SPE"):
          enter_critical
          rq_read_spe_req[index] = True
          exit_critical
          while(rq_read_spe_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_spe[index]
  
      elif (var_name == "OBJ"):
          enter_critical
          rq_read_obj_req[index] = True
          exit_critical
          while(rq_read_obj_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_obj[index]
  
      elif (var_name == "STA"):
          enter_critical
          rq_read_sta_req[index] = True
          exit_critical
          while(rq_read_sta_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_sta[index]
  
      elif (var_name == "FLT"):
          enter_critical
          rq_read_flt_req[index] = True
          exit_critical
          while(rq_read_flt_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_flt[index]
  
      elif (var_name == "POS"):
          enter_critical
          rq_read_pos_req[index] = True
          exit_critical
          while(rq_read_pos_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pos[index]
  
      elif (var_name == "PRE"):
          enter_critical
          rq_read_pre_req[index] = True
          exit_critical
          while(rq_read_pre_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pre[index]
  
      elif (var_name == "LBP"):
          enter_critical
          rq_read_lbp_req[index] = True
          exit_critical
          while(rq_read_lbp_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbp[index]
  
      elif (var_name == "LRD"):
          enter_critical
          rq_read_lrd_req[index] = True
          exit_critical
          while(rq_read_lrd_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lrd[index]
  
      elif (var_name == "LBL"):
          enter_critical
          rq_read_lbl_req[index] = True
          exit_critical
          while(rq_read_lbl_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lbl[index]
  
      elif (var_name == "LGN"):
          enter_critical
          rq_read_lgn_req[index] = True
          exit_critical
          while(rq_read_lgn_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_lgn[index]
  
      elif (var_name == "MSC"):
          enter_critical
          rq_read_msc_req[index] = True
          exit_critical
          while(rq_read_msc_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_msc[index]
  
      elif (var_name == "MOD"):
          enter_critical
          rq_read_mod_req[index] = True
          exit_critical
          while(rq_read_mod_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_mod[index]
  
      elif (var_name == "NCY"):
          enter_critical
          rq_read_ncy_req[index] = True
          exit_critical
          while(rq_read_ncy_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_ncy[index]
  
      elif (var_name == "PCO"):
          enter_critical
          rq_read_pco_req[index] = True
          exit_critical
          while(rq_read_pco_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_pco[index]
  
      elif (var_name == "DST"):
          enter_critical
          rq_read_dst_req[index] = True
          exit_critical
          while(rq_read_dst_req[index]):
              sleep(0.008)
          end
          var_value = rq_read_dst[index]
  
      end
  
      return var_value
  end
  
  def rq_get_var_string(var_name, nbr_bytes, gripper_socket="1"):
      index = rq_socket_to_index(gripper_socket)
      var_value = ""
  
      enter_critical
  
      if (var_name == "SNU"):
          if(gripper_socket == "1"):
              var_value = rq_read_snu_1
          elif(gripper_socket == "2"):
              var_value = rq_read_snu_2
          elif(gripper_socket == "3"):
              var_value = rq_read_snu_3
          elif(gripper_socket == "4"):
              var_value = rq_read_snu_4
          end
      elif (var_name == "FWV"):
          if(gripper_socket == "1"):
              var_value = rq_read_fwv_1
          elif(gripper_socket == "2"):
              var_value = rq_read_fwv_2
          elif(gripper_socket == "3"):
              var_value = rq_read_fwv_3
          elif(gripper_socket == "4"):
              var_value = rq_read_fwv_4
          end
      elif (var_name == "VER"):
          if(gripper_socket == "1"):
              var_value = rq_read_ver_1
          elif(gripper_socket == "2"):
              var_value = rq_read_ver_2
          elif(gripper_socket == "3"):
              var_value = rq_read_ver_3
          elif(gripper_socket == "4"):
              var_value = rq_read_ver_4
          end
      end
  
      exit_critical
  
      return var_value
  end
  
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
      if(gripper_selected):
          if(rq_is_object_detected(gripper_socket)):
              return True
          else:
              return False
          end
      else:
          return True
      end
  end
  
  ############################################
  # normalized functions (maps 0-100 to 0-255)
  ############################################
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  
  def rq_get_position():
      return rq_current_pos_norm()
  end
  
  def rq_gripper_led_on(gripper_socket="1"):
      rq_set_var("LBP",0, gripper_socket)
  end
  
  def rq_gripper_led_off(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_red(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_blue(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  def rq_gripper_led_force_green(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",0, gripper_socket)
      rq_set_var("LBL",0, gripper_socket)
      rq_set_var("LGN",1, gripper_socket)
  end
  
  def rq_gripper_led_force_purple(gripper_socket="1"):
      rq_set_var("LBP",1, gripper_socket)
      rq_set_var("LRD",1, gripper_socket)
      rq_set_var("LBL",1, gripper_socket)
      rq_set_var("LGN",0, gripper_socket)
  end
  
  ############################################
  # mm/inches functions
  ############################################
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  
  def rq_move_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move(pos_gripper, gripper_socket)
  end
  
  def rq_move_and_wait_mm(pos_mm, gripper_socket=1):
      pos_gripper = mm_to_gripper(pos_mm, gripper_socket)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  
  def rq_move_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_mm(pos_mm, gripper_socket)
  end
  
  def rq_move_and_wait_inches(pos_in, gripper_socket=1):
      pos_mm = pos_in * 25.4
      rq_move_and_wait_mm(pos_mm, gripper_socket)
  end
  
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      value_norm = (value_gripper / 255) * 100
  
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
  
      if (value_mm > open_mm):
          value_mm_limited = open_mm
      elif (value_mm < closed_mm):
          value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
  
      return value_mm_limited
  end
  
  def mm_to_gripper(value_mm, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
  
      slope = (closed_norm - open_norm) / (closed_mm - open_mm)
      value_norm = (value_mm - closed_mm) * slope + closed_norm
  
      value_gripper = value_norm * 255 / 100
  
      if (value_gripper > 255):
          value_gripper_limited = 255
      elif (value_gripper < 0):
          value_gripper_limited = 0
      else:
          value_gripper_limited = round_value(value_gripper)
      end
  
      return value_gripper_limited
  end
  
  def round_value(value):
      value_mod = value % 1
  
      if(value_mod < 0.5):
          return floor(value)
      else:
          return ceil(value)
      end
  end
  
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  
  def clear_socket_buffer(gripper_socket="1", read_timeout = 0.1):
      rq_comm_clear_socket_buffer_enabled[rq_socket_to_index(gripper_socket)] = True
  end
  
  def rq_gripper_id_to_ascii(gripper_id):
      if(gripper_id == "1"):
          return 57
      elif(gripper_id == "2"):
          return 50
      elif(gripper_id == "3"):
          return 51
      elif(gripper_id == "4"):
          return 52
      end
  end
  
  def scale(value, rawRange, scaledRange):
      def computeSlope(inputRange, outputRange):
          outputRangeDelta = outputRange[1] - outputRange[0]
          inputRangeDelta = inputRange[1] - inputRange[0]
  
          if (inputRangeDelta == 0):
              return 0
          else:
              return outputRangeDelta / inputRangeDelta
          end
      end
  
      def computeIntercept(slope, inputRange, outputRange):
          return outputRange[0] - (slope * inputRange[0])
      end
  
      def clipScaledValue(outputScaledValue, outputRange):
          if (outputRange[0] < outputRange[1]):
              return clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange)
          else:
              return clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange)
          end
      end
  
      def clipWhenLowerLimitIsGreaterThanHigherLimit(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[1]):
              return outputRange[1]
          elif (outputScaledValue > outputRange[0]):
              return outputRange[0]
          else:
              return outputScaledValue
          end
      end
  
      def clipWhenLowerLimitIsLessThanHigher(outputScaledValue, outputRange):
          if (outputScaledValue < outputRange[0]):
              return outputRange[0]
          elif (outputScaledValue > outputRange[1]):
              return outputRange[1]
          else:
              return outputScaledValue
          end
      end
  
      slope = computeSlope(rawRange, scaledRange)
      intercept = computeIntercept(slope, rawRange, scaledRange)
      scaledValue = slope * value + intercept
      return clipScaledValue(scaledValue, scaledRange)
  end
  
  def limit(value, range):
      return scale(value, range, range)
  end
  
  
  rq_init_comm_if_connected(9, "1")
  rq_init_comm_if_connected(2, "2")
  rq_init_comm_if_connected(3, "3")
  rq_init_comm_if_connected(4, "4")
  rq_print_connected_grippers()
  rq_gripper_communication_thread = run rq_gripper_communication()
  set_closed_norm(100.0, 1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0, 2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0, 3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0, 4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  rq_current_limit_enabled = False
  while(not rq_gripper_communication_thread_started):
      sleep(0.008)
  end
  # end: URCap Installation Node
  global Vertical_3_p=p[.138885408770, -.597734994115, .345465728645, .020328607375, .009472346729, .004936256276]
  global Vertical_3_q=[1.5825845003128052, -1.3035788101008912, 1.3692634741412562, -1.6159240208067835, -1.5805562178241175, 3.148454189300537]
  global Tilted_1_p=p[.138883686744, -.597728142783, .345429622193, -.448043800451, .010443563975, .002601926233]
  global Tilted_1_q=[1.5845965147018433, -1.4651393455317994, 1.7312191168414515, -2.2846466503539027, -1.5859773794757288, 3.1494011878967285]
  global Vertical_4_p=p[.138907887118, -.597724961045, .477595501516, .000033070909, -.000020568314, .002680866690]
  global Vertical_4_q=[1.5797940492630005, -1.280219630604126, 1.0041268507586878, -1.2945302587798615, -1.5720770994769495, 3.1477832794189453]
  global Vertical_6_p=p[.138875969234, -.597730539026, .130475163479, .000006847317, .000017170136, .002581409666]
  global Vertical_6_q=[1.5792073011398315, -1.1477825206569214, 1.743450943623678, -2.1663156948485316, -1.570512596760885, 3.1478190422058105]
  def AG_50():
    $ 75 "AG_50" "noBreak"
    $ 76 "MoveL"
    $ 77 "Vertical_3" "breakAfter"
    movel(Vertical_3_p, a=1.2, v=0.25)
    $ 78 "Tilted_1" "breakAfter"
    movel(Tilted_1_p, a=1.2, v=0.25)
    $ 79 "Vertical_4" "breakAfter"
    movel(Vertical_4_p, a=1.2, v=0.25)
    $ 80 "Vertical_6" "breakAfter"
    movel(Vertical_6_p, a=1.2, v=0.25)
  end
  $ 1 "BeforeStart"
  $ 2 "Script: agscript_util.script"
  # File: agscript_grind.cs
  # Project: AutoGrind
  # Author: Ned Lecky, Olympus Controls
  # Purpose: General utility function used in AutoGrind
  
  # Return max of 2 numeric values
  def max(n1, n2):
    if n1 > n2:
      return n1
    else:
      return n2
    end
  end
  
  # Return min of 2 numeric values
  def min(n1, n2):
    if n1 < n2:
      return n1
    else:
      return n2
    end
  end
  
  # Return absolute value of a numeric value
  def abs(n):
    if n < 0:
      return -n
    else:
      return n
    end
  end
  
  # Return param limited to lowLim <= param <= hiLim
  def limiter(param, loLim, hiLim):
    if param < loLim:
      return loLim
    elif param > hiLim:
      return hiLim
    else:
      return param
    end
  end
  
  # Send LF out the socket
  def socket_send_lf():
    socket_send_byte(10)
  end
  
  # Send n-vectors back to socket as [n,n,n,n,n,n]
  def return_vector(p, n = 6):
    socket_send_string("[")
    i = 0
    while i < n:
      if i > 0:
        socket_send_string(",")
      end
      socket_send_string(p[i])
      i = i + 1
    end
    socket_send_string("]")
  end
  
  # Send 6-element position back to socket as:
  #   (isPose=False)  name=[n,n,n,n,n,n]
  #   (isPose=True)   name=p[n,n,n,n,n,n]
  def return_position(name, isPose, p):
    socket_send_string(name)
    socket_send_string("=")
    if isPose == True:
      socket_send_string("p")
    end
    return_vector(p, 6)
    socket_send_lf()
  end
  
  # Return a 6-element vector to socket as a pose name=p[.....]
  def return_pose(name, p):
    return_position(name, True, p)
  end
  
  # Return a 6-element vector to socket as joint angles name=[.....]
  def return_joints(name, p):
    return_position(name, False, p)
  end
  
  # Special support to receive 1-4 port,value pairs and always pad with -1s to make 4 pairs
  # Essentialy returns command[3:end] padded out with -1s to always be 8 elements
  # Assumes length of command is specified in command[0]
  def command_3_padded_8(command):
    ret8 = [-1, -1, -1, -1, -1, -1, -1, -1]
    i = 0
    while i < command[0]-2:
      ret8[i] = command[i + 3]
      i = i + 1
    end
    return ret8
  end
  $ 3 "Script: agscript_robot.script"
  # File: agscript_robot.cs
  # Project: AutoGrind
  # Author: Ned Lecky, Olympus Controls
  # Purpose: Robot control commands supporting the AutoGrind application
  
  global response = "unknown"
  global robot_index = 0
  global robot_checkvalue = 0
  
  global robot_linear_speed_mps = 0.2
  global robot_linear_accel_mpss = 0.4
  global robot_blend_radius_m = 0.003
  global robot_joint_speed_rps = 1.0
  global robot_joint_accel_rpss = 4.0
  global robot_tcp = p[0, 0, 0.175, 0, 0, 0]
  global robot_tcp_part = robot_tcp
  global robot_payload_mass_kg = 1.0
  global robot_payload_cog_m = [0, 0, 0.50]
  # Geometry [1=FLAT 2=CYL 3=SPHERE, diameter_mm)
  global robot_part_geometry = [0, 0]
  global robot_door_closed_input = [-1, -1]
  global robot_footswitch_pressed_input = [-1, -1]
  global robot_tool_on_outputs = [-1, -1, -1, -1, -1, -1, -1, -1]
  global robot_tool_off_outputs = [-1, -1, -1, -1, -1, -1, -1, -1]
  global robot_coolant_on_outputs = [-1, -1, -1, -1, -1, -1, -1, -1]
  global robot_coolant_off_outputs = [-1, -1, -1, -1, -1, -1, -1, -1]
  global robot_freedrive_mode = 0
  
  # Defaults get set on load... and can be queried (or changed) from C#
  set_tcp(robot_tcp)
  set_payload(robot_payload_mass_kg, robot_payload_cog_m)
  
  # command should be[nElements,index,checkval,param[0],param[1],...]
  # put index into robot_index
  # validate checkval
  # Remove both from command so we get command = [nElements-2, param[0], param[1],...]
  def command_validate():
    # must be at least index, check, and 1 param
    if command[0] < 3:
      command[0] = 0
      return False
    end
  
    # Now make sure checksum matches what we expect
    global test_index = command[1]
    global test_checksum = command[2]
    if test_checksum != 1000 - test_index:
      command[0] = 0
      return False
    end
  
    # Now if we are still in the grind state and we are not getting a grind command (40) make sure we're are off the part!
    if grind_process_state and command[3] != 40:
      # Using set_grind_process_state which assumes robot_tcp_part!
      set_tcp(robot_tcp_part)
      set_grind_process_state(False)
      set_tcp(robot_tcp)
    end
  
    # Slide the robot commands and parameters back in command[] to remove the index and checksum
    local i = 3
    while (i < command[0] + 1):
      command[i-2] = command[i]
      i = i + 1
    end
    command[i-1] = 0
    command[i-2] = 0
    command[0] = command[0] - 2    # 2 fewer elements in the array now!
  
    global robot_index = test_index
    return True
  end
  
  # Call this when starting command execution
  def command_start():
    global last_comand = command
  
    # This one signifies we're starting a new command!
    global robot_starting = robot_index
    socket_set_var("robot_starting", robot_starting)
    socket_send_line("robot_ready=False")
  end
  
  # Call this when a command is complete
  def command_finish():
    local retval = "robot_response=" + response + "#robot_ready=True"
    socket_send_line(retval)
  
    global robot_completed = robot_index
    socket_set_var("robot_completed", robot_completed)
  end
  
  # Set variable interface. Interprets command[2] to select what to set and returns result to socket
  # Can also be used for validation and enforcing limits
  def set_variable():
    if command[2] == 1:
      # Set speed to s if s>0. Always returns current value
      s = command[3]
      if s > 0:
        robot_linear_speed_mps = s / 1000.0
      end
      socket_set_var("robot_linear_speed_mmps", robot_linear_speed_mps * 1000.0)
      global response = "set_linear_speed()"
    elif command[2] == 2:
      # Set accel to a if a>0. Always returns current value
      a = command[3]
      if a > 0:
        robot_linear_accel_mpss = a / 1000.0
      end
      socket_set_var("robot_linear_accel_mmpss", robot_linear_accel_mpss * 1000.0)
      global response = "set_linear_accel()"
    elif command[2] == 3:
      # Set blend to b if b>=0. Always returns current value
      b = command[3]
      if b >= 0:
        robot_blend_radius_m = b / 1000.0
      end
      socket_set_var("robot_blend_radius_mm", robot_blend_radius_m * 1000.0)
      global response = "set_blend_radius()"
    elif command[2] == 4:
      # Set joint speed to s if s>0. Always returns current value
      s = command[3]
      if s > 0:
        robot_joint_speed_rps = d2r(s)
      end
      socket_set_var("robot_joint_speed_dps", r2d(robot_joint_speed_rps))
      global response = "set_joint_speed()"
    elif command[2] == 5:
      # Set joint accel to a if a>0. Always returns current value
      a = command[3]
      if a > 0:
        robot_joint_accel_rpss = d2r(a)
      end
      socket_set_var("robot_joint_accel_dpss", r2d(robot_joint_accel_rpss))
      global response = "set_joint_accel()"
    elif command[2] == 6:
      # Set part_geometry to [shape, diameter_mm] if shape==1,2,3. Always returns "robot_part_geometry=[current geometry]"
      # Also updates robot_part_tcp using update_robot_tcp_part
      shape = command[3]
      if shape == 1:
        robot_part_geometry = [1, 0]
      elif shape == 2 or shape == 3:
        diameter_mm = limiter(command[4], 50, 3000)
        robot_part_geometry = [shape, diameter_mm]
      end
  
      update_robot_tcp_part()
  
      socket_send_string("robot_part_geometry=")
      return_vector(robot_part_geometry, 2)
      socket_send_lf()
      global response = "set_part_geometry()"
    elif command[2] == 10:
      # Set door closed input
      if command[3] >= 0:
        robot_door_closed_input[0] = command[3]
        robot_door_closed_input[1] = command[4]
      end
  
      socket_send_string("robot_door_closed_input=")
      return_vector(robot_door_closed_input, 2)
      socket_send_lf()
      socket_set_var("robot_door_closed", is_door_closed())
      global response = "set_door_closed_input()"
    elif command[2] == 11:
      # Set tool on output
      robot_tool_on_outputs = command_3_padded_8(command)
  
      socket_send_string("robot_tool_on_outputs=")
      return_vector(robot_tool_on_outputs, 8)
      socket_send_lf()
      global response = "set_tool_on_outputs()"
    elif command[2] == 12:
      # Set tool off output
      robot_tool_off_outputs = command_3_padded_8(command)
  
      socket_send_string("robot_tool_off_outputs=")
      return_vector(robot_tool_off_outputs, 8)
      socket_send_lf()
      global response = "set_tool_off_outputs()"
    elif command[2] == 13:
      # Set coolant on output
      robot_coolant_on_outputs = command_3_padded_8(command)
  
      socket_send_string("robot_coolant_on_outputs=")
      return_vector(robot_coolant_on_outputs, 8)
      socket_send_lf()
      global response = "set_coolant_on_outputs()"
    elif command[2] == 14:
      # Set coolant off output
      robot_coolant_off_outputs = command_3_padded_8(command)
  
      socket_send_string("robot_coolant_off_outputs=")
      return_vector(robot_coolant_off_outputs, 8)
      socket_send_lf()
      global response = "set_coolant_off_outputs()"
    elif command[2] == 15:
      # tool_on
      tool_power(True, 2)
      global response = "tool_on()"
    elif command[2] == 16:
      # tool_off
      tool_power(False, 2)
      global response = "tool_off()"
    elif command[2] == 17:
      # coolant_on
      coolant_flow(True, 2)
      global response = "coolant_on()"
    elif command[2] == 18:
      # coolant_off
      coolant_flow(False, 2)
      global response = "coolant_off()"
    elif command[2] == 19:
      # freedrive 1=on/0=off, 0=base|1=tcp|2=tcp_part, 6 axisEnables
      if command[3] == 0:
        end_freedrive_mode()
        set_tcp(robot_tcp)
        robot_freedrive_mode = 0
        socket_set_var("robot_freedrive_mode", robot_freedrive_mode)
      else:
        local coordSys = command[4]
        local freeAxes = [command[5], command[6], command[7], command[8], command[9], command[10]]
        if coordSys == 1:
          set_tcp(robot_tcp)
          freedrive_mode(freeAxes = freeAxes, feature = "tool")
        elif coordSys == 2:
          set_tcp(robot_tcp_part)
          freedrive_mode(freeAxes = freeAxes, feature = "tool")
        else:
          # Base
          freedrive_mode(freeAxes = freeAxes)
        end
        robot_freedrive_mode = 1
        socket_set_var("robot_freedrive_mode", robot_freedrive_mode)
      end
      global response = "freedrive_mode()"
    elif command[2] == 20:
      # set_tcp if command[3] > -10. Always returns robot_tcp=p[...]
      if command[3] > -10:
        robot_tcp = p[command[3], command[4], command[5], command[6], command[7], command[8]]
        set_tcp(robot_tcp)
      end
      return_pose("robot_tcp", get_tcp_offset())
      # Recompute robot_tcp_part based on current geometry
      update_robot_tcp_part()
      global response = "set_tcp()"
    elif command[2] == 21:
      # set_payload if command[3] > 0. Always return robot_m and robot_cog
      if command[3] > 0:
        robot_payload_mass_kg = command[3]
        robot_payload_cog_m = [command[4], command[5], command[6]]
        set_payload(robot_payload_mass_kg, robot_payload_cog_m)
      end
      socket_set_var("robot_payload_mass_kg", robot_payload_mass_kg)
      socket_send_string("robot_payload_cog_m=")
      return_vector(robot_payload_cog_m, 3)
      socket_send_lf()
      global response = "set_payload()"
    elif command[2] == 22:
      # Set footswitch pressed input
      if command[3] >= 0:
        robot_footswitch_pressed_input[0] = command[3]
        robot_footswitch_pressed_input[1] = command[4]
      end
  
      socket_send_string("robot_footswitch_pressed_input=")
      return_vector(robot_footswitch_pressed_input, 2)
      socket_send_lf()
      socket_set_var("robot_footswitch_pressed", is_footswitch_pressed())
      global response = "set footswitch_pressed_input()"
  elif command[2] == 30:
      # set_output
      local out = command[3]
      local state = command[4]>0
      set_digital_out(out,state)
      global response = "set_output()"
    else:
      global response = "set_variable ERROR"
    end
  end
  
  # Compute appropriate robot_tcp for the part based on robot_tcp and robot_part_geometry
  # They're the same for flat parts, but the TCP is adjusted to the center of the cylinder or sphere
  def update_robot_tcp_part():
    shape = robot_part_geometry[0]
    if shape == 1:  # Flat
      robot_tcp_part = robot_tcp
    else:  # Cylinder or Sphere
      robot_tcp_part = pose_trans(robot_tcp, p[0, 0, robot_part_geometry[1] / 2000.0, 0, 0, 0])
    end
    return_pose("robot_tcp_part", robot_tcp_part)
  end
  
  # Send get_tcp_offset() result to socket
  def return_tcp_offset():
    p = get_tcp_offset()
    return_pose("tcp_offset", p)
    global response = "return_tcp_offset()"
  end
  
  # Send get_actual_tcp_pose() to socket
  def return_actual_tcp_pose():
    p = get_actual_tcp_pose()
    return_pose("actual_tcp_pose", p)
    global response = "return_actual_tcp_pose()"
  end
  
  # Send get_actual_joint_positions() to socket
  def return_get_actual_joint_positions():
    p = get_actual_joint_positions()
    return_joints("actual_joint_positions", p)
    global response = "return_get_actual_joint_positions()"
  end
  
  # Send both joints and pose to socket labeled position_p and position_q
  def return_both_positions():
    return_joints("position_q", get_actual_joint_positions())
    return_pose("position_p", get_actual_tcp_pose())
    global response = "return_both_positions()"
  end
  
  # Movel relatively in base coordinates
  def movel_relative_base(p1):
    local p0 = get_actual_tcp_pose()
    local p2 = pose_add(p0, p1)
    if p1[0] == 0 and p1[1] == 0 and p1[2] == 0:  # Rotational move
      movel(p2, robot_joint_accel_rpss, robot_joint_speed_rps)
    else:
      movel(p2, robot_linear_accel_mpss, robot_linear_speed_mps)
    end
    global response = "movel_relative_base()"
  end
  
  # Movel relatively in TCP coordinates
  def movel_relative_tcp(p1):
    local p2 = pose_trans(get_forward_kin(), p1)
    if p1[0] == 0 and p1[1] == 0 and p1[2] == 0:  # Rotational move
      movel(p2, robot_joint_accel_rpss, robot_joint_speed_rps)
    else:
      movel(p2, robot_linear_accel_mpss, robot_linear_speed_mps)
    end
    global response = "movel_relative_tcp()"
  end
  
  # Movel relatively in TCP_part coordinates
  def movel_relative_tcp_part(p1):
    set_tcp(robot_tcp_part)
    local p2 = pose_trans(get_forward_kin(), p1)
    if p1[0] == 0 and p1[1] == 0 and p1[2] == 0:  # Rotational move
      movel(p2, robot_joint_accel_rpss, robot_joint_speed_rps)
    else:
      movel(p2, robot_linear_accel_mpss, robot_linear_speed_mps)
    end
    set_tcp(robot_tcp)
    global response = "movel_relative_tcp_part()"
  end
  
  # Change one element of current pose and movel there
  def movel_one_only(index = 0, val = 0):
    local p = get_actual_tcp_pose()
    p[index] = val
    if index < 3:  # Translational
      movel(p, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
    else:
      movel(p, a = robot_joint_accel_rpss, v = robot_joint_speed_rps)
    end
    global response = "movel_one_only()"
  end
  
  # Change only rotation elements of current pose and movel there
  def movel_rot_only(r1 = 0, r2 = 0, r3 = 0):
    local p = get_actual_tcp_pose()
    p[3] = r1
    p[4] = r2
    p[5] = r3
    movel(p, a = robot_joint_accel_rpss, v = robot_joint_speed_rps)
    global response = "movel_rot_only()"
  end
  
  # Movej to position (works with joints or poses)
  def movej_ag(p):
    movej(p, a = robot_joint_accel_rpss, v = robot_joint_speed_rps)
    global response = "movej_ag()"
  end
  
  # Movel to position (works with joints or poses)
  def movel_ag(p):
    movel(p, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
    global response = "movel_ag()"
  end
  
  # ####################################################################################
  # Interrupting Motion
  # Motion and force_mode and part contact muct all end if any of 3 things happen
  #  1) Door is opened
  #  2) We're in contact with the part and grinding, but no grind command comes within some time (default 1.5s)
  #  3) We receive an abort message from the host
  #
  # How is it implemented?
  #
  # 1) io_monitor_thread (below) is ALWAYS running. Fires every time_door_check_rate_s (0.25s)
  #    - Whenever it sees the state of the door change, it sends SET robot_door_closed state to host
  #    - Whenever it sees the state of the footswitch (DIN7) change, it sends SET robot_footswitch state to host
  #    - It monitors if we're still in contact wth the part butr not grinding (grind_process_state and grind_ready)
  #      - If that goes beyond grind_max_wait_ms it sets halt_grind=True
  # 2) no_command function (below). Called by PolScript everyu time it's waiting for a command and doesn't get one with a second
  #    - If halt_grind is set (by door monitor thread above)
  #      - stopl and simulate receiving a grind_retract
  #      - THIS FORCES THE force_off and motion commands to come from the primary thread, as they must
  # 3) listener_thread started by grind()
  #    - This runs only while a grind is in progress
  #    - It listens for commands from the host since PolyScope is blocked
  #    - Any command received increments halt_count which makes ok_to_proceed() false
  #    - That is checked in all the grinding programs and forces them to finish up and get off the part in an orderly fashion
  
  # ####################################################################################
  # START AUTOMATED DOOR MONITORING THREAD
  #
  # Return True if door in closed state (or if door input is undefined)
  def is_door_closed():
    if robot_door_closed_input[0] < 0:
      return True
    end
    if get_standard_digital_in(robot_door_closed_input[0]):
      f = 1
    else:
      f = 0
    end
    return f == robot_door_closed_input[1]
  end
  
  # Would be nice to have this din programmable like door_closed above! TODO
  def is_footswitch_pressed():
    if robot_footswitch_pressed_input[0] < 0:
      return False
    end
    if get_standard_digital_in(robot_footswitch_pressed_input[0]):
      f = 1
    else:
      f = 0
    end
    return f == robot_footswitch_pressed_input[1]
  end
  
  global robot_door_closed = is_door_closed()
  global robot_footswitch_pressed = is_footswitch_pressed()
  global time_in_uncommanded_grind = 0
  global time_door_check_rate_s = 0.250
  global grind_max_wait_ms = 1500
  # Also monitors footswitch!
  thread io_monitor_thread():
    # Send current state on start... in future will only be sent on change
    socket_set_var("robot_door_closed", robot_door_closed)
    socket_set_var("robot_footswitch_pressed", robot_footswitch_pressed)
  
    while True:
      sleep(time_door_check_rate_s)
      local new_door_closed = is_door_closed()
      local new_footswitch_pressed = is_footswitch_pressed()
  
      # Notify host if door state has changed
      if robot_door_closed != new_door_closed:
        robot_door_closed = new_door_closed
        socket_set_var("robot_door_closed", robot_door_closed)
      end
  
      # Notify host if footswitch state has changed
      if robot_footswitch_pressed != new_footswitch_pressed:
        robot_footswitch_pressed = new_footswitch_pressed
        socket_set_var("robot_footswitch_pressed", robot_footswitch_pressed)
      end
  
      # Check for still in grind process but not executing a grind command
      # This is what happens after a grind_...(....,1) executes while waiting for next command
      if grind_process_state and grind_ready:
        time_in_uncommanded_grind = time_in_uncommanded_grind + time_door_check_rate_s
        # No new grind commands for grind_max_wait_ms... schedule a grind_retract!
        if time_in_uncommanded_grind > grind_max_wait_ms / 1000.0:
          global halt_grind = True
        end
      else:
        time_in_uncommanded_grind = 0
      end
    end
  end
  global ioMonitorThread = run io_monitor_thread()
  #
  # END AUTOMATED DOOR MONITORING THREAD
  # ####################################################################################
  
  # ####################################################################################
  # START NO_COMMAND HOUSEKEEPING
  # This gets called when the PolyScope receives no command (about 1/second)
  # We can fire off any command here safely since no others will be seen until we exit
  #
  global no_command_count = 0
  global halt_grind = False
  def no_command():
    global no_command_count = no_command_count + 1
  
    if grind_process_state and grind_ready and halt_grind:
      halt_grind = False
      stopl(20)
  
      set_tcp(robot_tcp_part)
      set_grind_process_state(False)
      set_tcp(robot_tcp)
    end
  end
  #
  # END NO_COMMAND HOUSEKEEPING
  # ####################################################################################
  
  # ####################################################################################
  # START TOUCHOFF HANDLER
  #
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir = [direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized = normalize(posDir)
    local displacement_pose = p[direction_vector_normalized[0] * position_distance, direction_vector_normalized[1] * position_distance, direction_vector_normalized[2] * position_distance, 0, 0, 0]
    local wanted_displacement_in_base_frame = pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  #$ 7 "Robot Program"
  #$ 8 "MoveL"
  #$ 9 "Direction: Tool Z+"
  global move_thread_flag = 0
  global move_thread_approach_speed_mps = 0.01
  thread move_thread():
    enter_critical
    move_thread_flag = 1
    local towardsPos = calculate_point_to_move_towards(get_forward_kin(), [0.0, 0.0, 1.0], 0.025)
    movel(towardsPos, a = 0.5, v = move_thread_approach_speed_mps)
    move_thread_flag = 2
    exit_critical
  end
  # Currently using speed_mmps for both approach and 2X for departure
  def touchoff(approach_speed_mmps, retract_mm):
    approach_speed_mps = approach_speed_mmps / 1000.0
    global move_thread_approach_speed_mps = approach_speed_mps
  
    retract_speed_mps = approach_speed_mps * 2.0
  
    retract_m = retract_mm / 1000.0
  
    move_thread_flag = 0
    move_thread_han = run move_thread()
    while (True):
      local targetTcpDirection = get_target_tcp_speed()
      local stepsToRetract = tool_contact(direction = targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han
        stopl(20)
        local backTrackMovement = get_actual_joint_positions_history(stepsToRetract)
        local contactPose = get_forward_kin(backTrackMovement)
        local posDir = [targetTcpDirection[0], targetTcpDirection[1], targetTcpDirection[2]]
        local retractTo = contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir = normalize(posDir)
          local additionalRetraction = p[normalizedPosDir[0] * retract_m, normalizedPosDir[1] * retract_m, normalizedPosDir[2] * retract_m, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a = 1.0, v = retract_speed_mps)
        #$ 10 "Until (tool_contact_detection)"
        return True
        break
      end
      sleep(1.0E-10)
      if (move_thread_flag > 1):
        join move_thread_han
        #$ 11 "Until (distance)"
        #$ 12 "Popup: No part encountered"
        #popup("No part encountered", "Message", False, False, blocking = True)
        return False
        break
      end
      sync()
    end
    return False
  end
  #
  # END TOUCHOFF HANDLER
  # ####################################################################################
  $ 4 "Script: agscript_grind.script"
  # File: agscript_grind.cs
  # Project: AutoGrind
  # Author: Ned Lecky, Olympus Controls
  # Purpose: All grinding functions used in AutoGrind
  
  global grind_abort_listener_thread_handle = 0
  global pattern_grind_thread_handle = 0
  
  global halt_count = 0
  global halt_command = [0, 0, 0, 0]
  
  global grind_ready = True
  # grind_contact_enable:  0=No Contact   1=Touch but no tool/coolant on or force  2=Touch, Tool, Coolant, and Force
  global grind_contact_enable = 0
  global grind_touch_retract_mm = 3       # How far to retract after touch  (we do 2X this for ghrind_contact_enable=1)
  global grind_touch_speed_mmps = 0.1     # How fast to go in for the touch
  global grind_force_dwell_ms = 500       # How long to dwell after turning force more on
  global grind_blend_radius_m = 0.001     # Blend radius to use while grinding
  global grind_trial_speed_mmps = 20      # Grinding speed when not really grinding!
  global grind_accel_mmpss = 100          # Acceleration to use in grinding moves
  
  # Planning points
  global p_operator_init = p[0, 0, 0, 0, 0, 0]    # Where we were when operator issued first grind command
  global p_contact_init = p[0, 0, 0, 0, 0, 0]     # Where we first contacted the part
  global p_contact_center = p[0, 0, 0, 0, 0, 0]   # Computed where center of pattern would be in contact with part
  
  MATH_PI = 3.1415926535
  
  # Set global grind_n_cycles based on whether we really going to grind
  def n_cycle_setter(n_cycles):
    if grind_contact_enable == 2:
      global grind_n_cycles = limiter(n_cycles, 0, 100)
    else:
      global grind_n_cycles = limiter(n_cycles, 0, 1)
    end
    socket_set_var("grind_n_cycles", grind_n_cycles)
  end
  
  # Set all speed and acceleration globals based on part geometry and whether we really going to grind
  def speed_setter(speed_mmps):
    speed_mmps = limiter(speed_mmps, 0.1, 40)
    if grind_contact_enable == 2:
      global grind_speed_mps = speed_mmps / 1000.0
    else:
      global grind_speed_mps = grind_trial_speed_mmps / 1000.0
    end
    global grind_accel_mpss = grind_accel_mmpss / 1000.0
  
    # Default rotational speeds same as linear
    global grind_rot_speed_rps = grind_speed_mps
    global grind_rot_accel_rpss = grind_accel_mpss
    global grind_rot_blend_radius_rad = grind_blend_radius_m
  
    # If part is cylinder or spherical, diameter will be >0
    diam_m = robot_part_geometry[1] / 1000.0
    if diam_m > 0.0:
      # These are 1/4 the theoretical rotational speeds but we need to set them like this to get the correct speed- why??????
      global grind_rot_speed_rps = grind_speed_mps * 0.5 / diam_m
      global grind_rot_accel_rpss = grind_accel_mpss * 0.5 / diam_m
      global grind_rot_blend_radius_rad = grind_blend_radius_m * 0.5 / diam_m
    end
  end
  
  # Set grind variables chosen by command[2]
  # Value after set is always returned to socket
  def set_grind_variable():
    global grind_ready = False
    socket_send_line("grind_ready=False")
  
    if command[2] == 1:
      global response = "set grind_contact_enable"
      if command[3] >= 0 and command[3] <= 2:
        global grind_contact_enable = command[3]
      end
      socket_set_var("grind_contact_enable", grind_contact_enable)
    elif command[2] == 2:
      global response = "set grind_touch_retract_mm"
      if command[3] >= 0:
        global grind_touch_retract_mm = command[3]
      end
      socket_set_var("grind_touch_retract_mm", grind_touch_retract_mm)
    elif command[2] == 3:
      global response = "set grind_touch_speed_mmps"
      if command[3] >= 0:
        global grind_touch_speed_mmps = command[3]
      end
      socket_set_var("grind_touch_speed_mmps", grind_touch_speed_mmps)
    elif command[2] == 4:
      global response = "set grind_force_dwell_ms"
      if command[3] >= 0:
        global grind_force_dwell_ms = command[3]
      end
      socket_set_var("grind_force_dwell_ms", grind_force_dwell_ms)
    elif command[2] == 5:
      global response = "set grind_max_wait_ms"
      if command[3] >= 0:
        global grind_max_wait_ms = command[3]
      end
      socket_set_var("grind_max_wait_ms", grind_max_wait_ms)
    elif command[2] == 6:
      global response = "set grind_blend_radius_mm"
      if command[3] >= 0:
        global grind_blend_radius_m = command[3] / 1000.0
      end
      socket_send_string("grind_blend_radius_mm=")
      socket_send_string(grind_blend_radius_m * 1000.0)
      socket_send_lf()
    elif command[2] == 7:
      global response = "set grind_trial_speed_mmps"
      if command[3] > 0:
        global grind_trial_speed_mmps = command[3]
      end
      socket_set_var("grind_trial_speed_mmps", grind_trial_speed_mmps)
    elif command[2] == 8:
      global response = "set grind_accel_mmpss"
      if command[3] > 0:
        global grind_accel_mmpss = command[3]
      end
      socket_set_var("grind_accel_mmpss", grind_accel_mmpss)
    else:
      global response = "Unknown grind set variable command"
    end
  
    global grind_ready = True
    socket_send_line("grind_ready=True")
  end
  
  # Execute the desired grind operation as specified in command[2]...
  def grind():
    global grind_ready = False
    socket_send_line("grind_ready=False")
  
    # Start listening for abort commands from host
    if grind_abort_listener_thread_handle > 0:
      kill grind_abort_listener_thread_handle
      grind_abort_listener_thread_handle = 0
    end
    grind_abort_listener_thread_handle = run grind_abort_listener_thread()
  
    global grind_cycle = 0
    socket_set_var("grind_cycle", grind_cycle)
  
    # Defaults but any used should be set as needed below
    global grind_dx_mm = 0
    global grind_dy_mm = 0
    global grind_n_cycles = 0
    global grind_force_N = 10.0
    global grind_continue = False
    global grind_circle1_diam_mm = 0
    global grind_circle2_diam_mm = 0
    global grind_n_spirals = 0
    global grind_n_xsteps = 1
    global grind_n_ysteps = 1
    global grind_xstep_mm = 0
    global grind_ystep_mm = 0
    speed_setter(20)
  
    # Install tcp that puts tcp at center of part (noop for flat parts!)
    set_tcp(robot_tcp_part)
  
    if command[2] == 10:
      # LINEAR GRIND
      global response = "grind_line"
      global grind_dx_mm = limiter(command[3], 0, 1000)
      global grind_dy_mm = limiter(command[4], 0, 1000)
      n_cycle_setter(command[5])
      speed_setter(command[6])
      global grind_force_N = limiter(command[7], 0, 100)
      global grind_continue = command[8] > 0
      grind_line(grind_dx_mm, grind_dy_mm, grind_n_cycles, grind_continue)
  
    elif command[2] == 20:
      # RECTANGULAR GRIND
      global response = "grind_rect"
      global grind_dx_mm = limiter(command[3], 0, 1000)
      global grind_dy_mm = limiter(command[4], 0, 1000)
      n_cycle_setter(command[5])
      speed_setter(command[6])
      global grind_force_N = limiter(command[7], 0, 100)
      global grind_continue = command[8] > 0
      grind_rect(grind_dx_mm, grind_dy_mm, grind_n_cycles, grind_continue)
  
    elif command[2] == 30:
      # SERPENTINE GRIND
      global response = "grind_serpentine"
      global grind_dx_mm = limiter(command[3], 0, 1000)
      global grind_dy_mm = limiter(command[4], 0, 1000)
      global grind_n_xsteps = limiter(command[5], 1, grind_dx_mm)
      global grind_n_ysteps = limiter(command[6], 1, grind_dy_mm)
      n_cycle_setter(command[7])
      speed_setter(command[8])
      global grind_force_N = limiter(command[9], 0, 10)
      global grind_continue = command[10] > 0
      grind_serpentine(grind_dx_mm, grind_dy_mm, grind_n_xsteps, grind_n_ysteps, grind_n_cycles, grind_continue)
  
    elif command[2] == 40:
      # CIRCULAR GRIND
      global response = "grind_circle"
      global grind_circle1_diam_mm = limiter(command[3],0,1000)
      n_cycle_setter(command[4])
      speed_setter(command[5])
      global grind_force_N = limiter(command[6],0,100)
      global grind_continue = command[7] > 0
      grind_circle(grind_circle1_diam_mm, grind_n_cycles, grind_continue)
  
    elif command[2] == 50:
      # SPIRAL GRIND
      global response = "grind_spiral"
      global grind_circle1_diam_mm = limiter(command[3],0,1000)
      global grind_circle2_diam_mm = limiter(command[4],0,1000)
      global grind_n_spirals = limiter(command[5],1,100)
      n_cycle_setter(command[6])
      speed_setter(command[7])
      global grind_force_N = limiter(command[8],0,100)
      global grind_continue = command[9] > 0
      grind_spiral(grind_circle1_diam_mm, grind_circle2_diam_mm, grind_n_spirals, grind_n_cycles, grind_continue)
  
    elif command[2] == 99:
      # Retract Command
      global response = "grind_retract"
      set_grind_process_state(False)
  
    else:
      # Illegal grind command
      global response = "Unknown grind command"
    end
  
    # Restore tool-only tcp
    set_tcp(robot_tcp)
  
    # Stop listening for abort commands from host
    if grind_abort_listener_thread_handle > 0:
      kill grind_abort_listener_thread_handle
      grind_abort_listener_thread_handle = 0
    end
  
    global grind_ready = True
    socket_send_line("grind_ready=True")
  end
  
  # Get into contact with part (or away from it)
  # enable:  0=No Contact   1=Touch but no tool/coolant on or force  2=Touch, Tool, Coolant, and Force
  def contact_part(on = False, enable = 0):
    if on:
      if enable == 0:
        # Just do a small forward motion in the direction of touchoff- this is a simulated p_contact_init
        p_contact_init = pose_trans(get_forward_kin(), p[0, 0, 0.005, 0, 0, 0])
        movel(p_contact_init, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
      elif enable == 1:
        # Advance until contact but retract 2X grind distance and use this as a simulated p_contact_init
        success = touchoff(grind_touch_speed_mmps, grind_touch_retract_mm * 2.0)
        p_contact_init = get_target_tcp_pose()
        return success
      elif enable == 2:
        # Advance until contact
        success = touchoff(grind_touch_speed_mmps, grind_touch_retract_mm)
        # Touchoff has backed off by grind_touch_retract_mm so we need to compute that actual p_contact_init
        p_contact_init = pose_trans(get_forward_kin(), p[0, 0, grind_touch_retract_mm / 1000.0, 0, 0, 0])
        return success
      end
    else:  # Back off
      stopl(2.0)
      sleep(0.020)
      p1 = pose_trans(get_forward_kin(), p[0, 0, -0.010, 0, 0, 0])
      movel(p1, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
    end
  
    return True
  end
  
  # Sets digital outpus based 8-element list of 4 pairs DOUT#,State.  -1 indicates unused slot
  def set_digital_output_list(list):
    i = 0
    while i < 8:
      if list[i] >= 0:
        b = list[i + 1] == 1
        set_digital_out(list[i], b)
      end
      i = i + 2
    end
  end
  
  # Turn tool power on/off if enable=2
  def tool_power(on = False, enable = 0):
    if enable < 2:
      return None
    end
  
    if on:
      # ON IO
      set_digital_output_list(robot_tool_on_outputs)
    else:
      # OFF IO
      set_digital_output_list(robot_tool_off_outputs)
    end
  
    return None
  end
  
  # Turn coolant on/off if enable=2
  def coolant_flow(on = False, enable = 0):
    if enable < 2:
      return None
    end
  
    if on:
      # ON IO
      set_digital_output_list(robot_coolant_on_outputs)
    else:
      # OFF IO
      set_digital_output_list(robot_coolant_off_outputs)
    end
  
    return None
  end
  
  # Turn foce mode on/pff if enable=2
  def apply_force(on = False, enable = 0, approach_speed_mmps = 10):
    if enable < 2:
      return None
    end
  
    if on:
      # Settle and zero the force/torque sensor
      sleep(0.1)
      zero_ftsensor()
      # Force is in tool frame
      # Compliant in Tool Z
      # Applying grind_force_N in Z+
      # 2: Force frame not transformed
      # Speed limits
      force_mode(tool_pose(), [0, 0, 1, 0, 0, 0], [0.0, 0.0, grind_force_N, 0.0, 0.0, 0.0], 2, [0.1, 0.1, approach_speed_mmps / 1000.0, 0.3490658503988659, 0.3490658503988659, 0.3490658503988659])
      # Now we sleep as directed to hopefully come into contact with the part!
      sleep(grind_force_dwell_ms / 1000.0)
    else:
      end_force_mode()
      sleep(0.1)
    end
  
    return None
  end
  
  # Start/stop Grinding (on/off)
  # Pose to center is the offset we shgould move to initial touch point [0]=FLAT [1]=CYLINDER [2]=SPHERE
  global grind_process_state = False
  def set_grind_process_state(on = False, pose_to_center = [p[0, 0, 0, 0, 0, 0], p[0, 0, 0, 0, 0, 0], p[0, 0, 0, 0, 0, 0]]):
    if on and not grind_process_state:
      global p_operator_init = get_target_tcp_pose()
  
      # Move to start position for touchoff
      shape = robot_part_geometry[0]
      if shape < 1 or shape > 3:
        return False
      end
  
      p1 = pose_trans(p_operator_init, pose_to_center[shape-1])
      movel(p1, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
  
      # Touch part and set p_contact_init
      if not contact_part(True, grind_contact_enable):
        # Failure to contact part should abort... don't set grind_process_state and return False
        movel(p_operator_init, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
        socket_send_line("grind_process_state=False")
        return False
      end
  
      # Compute p_contact_center... where we would have been if we had touched off from the operator teach position!
      reverse_pose_to_center = pose_to_center[shape-1]
      i = 0
      while i < 6:
        reverse_pose_to_center[i] = -reverse_pose_to_center[i]
        i = i + 1
      end
      global p_contact_center = pose_trans(p_contact_init, reverse_pose_to_center)
  
      # Now power everything on (although these will do nothing unless conact_enable==2)
      tool_power(True, grind_contact_enable)
      coolant_flow(True, grind_contact_enable)
      apply_force(True, grind_contact_enable, grind_touch_speed_mmps)
      grind_process_state = True
    elif not on and grind_process_state:
      # Shut everything down and return to original pose
      apply_force(False, grind_contact_enable, 0)
      contact_part(False, grind_contact_enable)
      coolant_flow(False, grind_contact_enable)
      tool_power(False, grind_contact_enable)
      movel(p_operator_init, a = robot_linear_accel_mpss, v = robot_linear_speed_mps)
      grind_process_state = False
    end
  
    # Always let the host know status
    if grind_process_state:
      socket_send_line("grind_process_state=True")
    else:
      socket_send_line("grind_process_state=False")
    end
    return True
  end
  
  ######################################################################################
  # Thread to listen for abort messages while grinding
  #
  thread grind_abort_listener_thread():
    global halt_command = [0, 0, 0, 0]
    global halt_count = 0
    while (halt_count == 0):
      global halt_command = socket_read_ascii_float(3, timeout = 0.1)
  
      # If door is open, that adds a halt count (anything >0 will stop us!)
      if not is_door_closed():
        global halt_count = halt_count + 1
      end
  
      # If we've received(index,checksum,10,...) that adds a halt count (as long as checksum matches)
      if halt_command[0] > 2:
        global test_index = halt_command[1]
        global test_checksum = halt_command[2]
        global test_command = halt_command[3]
  
        if test_checksum == 1000 - test_index and test_command == 10:
          global halt_count = halt_count + 1
  
          # Send an start/finish acknowledgement just for this command!
          socket_set_var("robot_starting", test_index)
          socket_set_var("robot_completed", test_index)
        end
      end
      sync()
    end
    return None
  end
  
  # Should we proceed? lat_count==0 means no door-opens and no abort commands from host
  def ok_to_proceed():
    return halt_count == 0
  end
  #
  # Thread to listen for abort messages while grinding
  ######################################################################################
  
  
  ######################################################################################
  # TOP LEVEL GRIND FUNCTIONS
  #
  
  # Grind along a line dx_mm x dy_mm centered on current tool position. Repeat n_cycles times. If stay_in_contact, stay_in_contact at end.
  def grind_line(dx_mm, dy_mm, n_cycles, stay_in_contact):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    dy_m = dy_mm / 1000.0
    radius_m = robot_part_geometry[1] / 2000.0
    drx_rad = dx_m / radius_m
    dry_rad = dy_m / radius_m
  
    # Grind time estimate
    time_ms = sqrt(dx_mm * dx_mm + dy_mm * dy_mm) * n_cycles / grind_speed_mps + 1500
    socket_set_var("robot_step_time_estimate_ms", time_ms)
  
    if not set_grind_process_state(True, [p[-dx_m / 2.0, -dy_m / 2.0, 0, 0, 0, 0], p[-dx_m / 2.0, 0, 0, -dry_rad / 2.0, 0, 0], p[0, 0, 0, -drx_rad / 2.0, -dry_rad / 2.0, 0]]):
      return False
    end
  
    # Grind the pattern
    shape = robot_part_geometry[0]
    diam_m = robot_part_geometry[1] / 1000.0
    if shape == 1:
      pattern_line_flat(p_contact_center, dx_m, dy_m, n_cycles)
    elif shape == 2:
      # Speed factor is 0.5/diam for pure rotational (all y) and 1.0 for pure translational (all x)
      max_speed_factor = 0.5 / diam_m
      theta = atan2(abs(dy_mm), abs(dx_mm))
      speed_factor = 1.0 + (max_speed_factor-1.0) * abs(sin(theta))
      pattern_line_cylinder(p_contact_center, dx_m, dry_rad, speed_factor, n_cycles)
    elif shape == 3:
      pattern_line_sphere(p_contact_center, drx_rad, dry_rad, n_cycles)
    end
  
    if not stay_in_contact or not ok_to_proceed():
      set_grind_process_state(False)
    end
    return True
  end
  
  # Grind along a rect dx_mm x dy_mm centered on current tool position. Repeat n_cycles times. If stay_in_contact, stay_in_contact at end.
  # Move in x direction first, then y
  def grind_rect(dx_mm, dy_mm, n_cycles, stay_in_contact):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    dy_m = dy_mm / 1000.0
    diam_m = robot_part_geometry[1] / 1000.0
    radius_m = diam_m / 2.0
    drx_rad = dx_m / radius_m
    dry_rad = dy_m / radius_m
    speed_factor = 0.5 / diam_m  # 0.5 / diam_m is the speedup needed on rotational moves
  
    # Grind time estimate
    time_ms = 2 * (dx_mm + dy_mm) * n_cycles / grind_speed_mps + 1500
    socket_set_var("robot_step_time_estimate_ms", time_ms)
  
    if not set_grind_process_state(True, [p[-dx_m / 2.0, -dy_m / 2.0, 0, 0, 0, 0], p[-dx_m / 2.0, 0, 0, -dry_rad / 2.0, 0, 0], p[0, 0, 0, -drx_rad / 2.0, -dry_rad / 2.0, 0]]):
      return False
    end
  
    # Grind the pattern
    shape = robot_part_geometry[0]
    if shape == 1:
      pattern_rect_flat(p_contact_center, dx_m, dy_m, n_cycles)
    elif shape == 2:
      pattern_rect_cylinder(p_contact_center, dx_m, dry_rad, n_cycles)
    elif shape == 3:
      # Swapping axes here since RY is aligned with the X of the FLAT and CYLINDER geometries
      pattern_rect_sphere(p_contact_center, dry_rad, drx_rad, n_cycles)
    end
  
    if not stay_in_contact or not ok_to_proceed():
      set_grind_process_state(False)
    end
    return True
  end
  
  # Grind along a rect in serpentine dx_mm,dy_mm incrementing by xstep_mm,ystep_mm centered on current tool position. Repeat n_cycles times. If stay_in_contact, stay_in_contact at end.
  # Move in x direction first, then y
  def grind_serpentine(dx_mm, dy_mm, n_xsteps, n_ysteps, n_cycles, stay_in_contact):
    if n_cycles < 1:
      return True
    end
  
    # Either n_xsteps or n_ysteps must be 1. Whichever one is one will be the direction of the first move.
    if n_xsteps != 1 and n_ysteps != 1:
      return False
    end
  
    # Unit conversion
    dx_m = dx_mm / 1000.0
    dy_m = dy_mm / 1000.0
    part_radius_m = robot_part_geometry[1] / 2000.0
    drx_rad = dy_m / part_radius_m
    dry_rad = dy_m / part_radius_m
  
    # Grind time estimate
    # Per Cycle:
    # 1,3 does 4 passes in x and 1 in y     3,1 does 4 passes in Y and 1 in X
    #   ########################            #  ####  #
    #                          #            #  #  #  #
    #   ########################            #  #  #  #
    #   #                                   #  #  #  #
    #   ########################            #  #  #  #
    #                          #            #  #  #  #
    #   ########################            ####  ####
    if n_xsteps == 1:
      time_ms = (dx_mm * (n_ysteps + 1) + dy_mm) * n_cycles / grind_speed_mps + 1500
    else:
      time_ms = (dx_mm + dy_mm * (n_xsteps + 1)) * n_cycles / grind_speed_mps + 1500
    end
    socket_set_var("robot_step_time_estimate_ms", time_ms)
  
    if not set_grind_process_state(True, [p[-dx_m / 2.0, -dy_m / 2.0, 0, 0, 0, 0], p[-dx_m / 2.0, 0, 0, -dry_rad / 2.0, 0, 0], p[0, 0, 0, -drx_rad / 2.0, -dry_rad / 2.0, 0]]):
      return False
    end
  
    # Grind the pattern
    shape = robot_part_geometry[0]
    if shape == 1:
      pattern_serpentine_flat(p_contact_center, dx_m, dy_m, n_xsteps, n_ysteps, n_cycles)
    elif shape == 2:
      pattern_serpentine_cylinder(p_contact_center, dx_m, drx_rad, n_xsteps, n_ysteps, n_cycles)
    elif shape == 3:
      pattern_serpentine_sphere(p_contact_center, drx_rad, dry_rad, n_xsteps, n_ysteps, n_cycles)
    end
  
    if not stay_in_contact or not ok_to_proceed():
      set_grind_process_state(False)
    end
    return True
  end
  
  # Grind along a circle with circle_diam_mm centered on p_center. Repeat n_cycles times. If stay_in_contact, stay_in_contact at end.
  def grind_circle(circle_diam_mm, n_cycles, stay_in_contact):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    circle_diam_m = circle_diam_mm / 1000.0
    part_diam_m = robot_part_geometry[1] / 1000.0
  
    # Grind time estimate
    time_ms = MATH_PI * circle_diam_mm * n_cycles / grind_speed_mps + 1500
    socket_set_var("robot_step_time_estimate_ms", time_ms)
  
  
    if not set_grind_process_state(True, [p[-circle_diam_m / 2.0, 0, 0, 0, 0, 0], p[-circle_diam_m / 2.0, 0, 0, 0, 0, 0], p[0, 0, 0, -circle_diam_m / part_diam_m, 0, 0]]):
      return False
    end
  
    # Grind the pattern
    shape = robot_part_geometry[0]
    if shape == 1:
      pattern_circle_flat(p_contact_center, circle_diam_m, n_cycles)
    elif shape == 2:
      pattern_circle_cylinder(p_contact_center, circle_diam_m, part_diam_m, n_cycles)
    elif shape == 3:
      pattern_circle_sphere(p_contact_center, circle_diam_m, part_diam_m, n_cycles)
    end
  
    if not stay_in_contact or not ok_to_proceed():
      set_grind_process_state(False)
    end
    return True
  end
  
  # Grind along a spiral circle1_diam_mm to circle2_diam_mm in n_spirals with rotations centered on current tool position. Repeat n_cycles times. If stay_in_contact, stay_in_contact at end.
  def grind_spiral(circle1_diam_mm, circle2_diam_mm, n_spirals, n_cycles, stay_in_contact):
    if n_cycles < 1:
      return True
    end
  
    # Unit conversion
    circle1_diam_m = circle1_diam_mm / 1000.0
    circle2_diam_m = circle2_diam_mm / 1000.0
    part_diam_m = robot_part_geometry[1] / 1000.0
  
    # Grind time estimate based on average diam
    avg_diam_mm = (circle1_diam_mm + circle2_diam_mm) / 2.0
    time_ms = MATH_PI * avg_diam_mm * n_spirals * n_cycles / grind_speed_mps + 1500
    socket_set_var("robot_step_time_estimate_ms", time_ms)
  
    if not set_grind_process_state(True, [p[-circle1_diam_m / 2.0, 0, 0, 0, 0, 0], p[-circle1_diam_m / 2.0, 0, 0, 0, 0, 0], p[0, 0, 0, -circle1_diam_m / part_diam_m, 0, 0]]):
      return False
    end
  
    # Grind the pattern
    shape = robot_part_geometry[0]
    if shape == 1:
      pattern_spiral_flat(p_contact_center, circle1_diam_m, circle2_diam_m, n_spirals, n_cycles)
    elif shape == 2:
      pattern_spiral_cylinder(p_contact_center, circle1_diam_m, circle2_diam_m, n_spirals, part_diam_m, n_cycles)
    elif shape == 3:
      pattern_spiral_sphere(p_contact_center, circle1_diam_m, circle2_diam_m, n_spirals, part_diam_m, n_cycles)
    end
  
    if not stay_in_contact or not ok_to_proceed():
      set_grind_process_state(False)
    end
    return True
  end
  
  
  ######################################################################################
  # PATTERN GRINDING SUPPORT FUNCTIONS
  #
  
  #
  # Segmented move grind_movel... grinds along a polygon point by point (in any coordinates) in 250mS segments
  #
  global grind_movel_p_center = p[0, 0, 0, 0, 0, 0]
  global grind_movel_dp1 = p[0, 0, 0, 0, 0, 0]
  global grind_movel_p1 = p[0, 0, 0, 0, 0, 0]
  global grind_movel_p_latest = p[0, 0, 0, 0, 0, 0]
  global grind_movel_accel_mpss = 1
  global grind_movel_speed_mps = 1
  
  # Start a grind_movel
  def grind_movel_start(p_center, dp, a, v):
    global grind_movel_p_center = p_center
    global grind_movel_dp1 = dp
    global grind_movel_p1 = pose_trans(p_center, grind_movel_dp1)
    global grind_movel_accel_mpss = a
    global grind_movel_speed_mps = v
  
    global grind_cycle = 1
    if ok_to_proceed():
      movel(grind_movel_p1, a = grind_movel_accel_mpss, v = grind_movel_speed_mps)
    end
  end
  
  # Complete a grind_movel
  def grind_movel_finish():
    if ok_to_proceed():
      movel(grind_movel_p_latest, a = grind_movel_accel_mpss, v = grind_movel_speed_mps)
    end
  end
  
  # Next waypoint in the polygon
  def grind_movel(dp, a, v, t, r):
    local ddp = dp
    local i = 0
    while i <= 5:
      ddp[i] = ddp[i] - grind_movel_dp1[i]
      i = i + 1
    end
    local n = ceil(t * 4.0) # number of segments to use; 4 per second ==> can stop within 0.25s
  
    local i = 1
    while i <= n and ok_to_proceed():
      local dp = grind_movel_dp1
      local scale = i / n
      local j = 0
      while j <= 5:
        dp[j] = grind_movel_dp1[j] + ddp[j] * scale
        j = j + 1
      end
      global grind_movel_p_latest = pose_trans(grind_movel_p_center, dp)
      movel(grind_movel_p_latest, a = a, v = v, r = r)
      i = i + 1
    end
    # TODO is this necessary? Brings us ta a halt at the end of the line
    # Needed this to not round off skinny rects, for example
    movel(grind_movel_p_latest, a = a, v = v)
    global grind_movel_dp1 = dp
  end
  
  # Call at end of pattern
  def pattern_complete():
    # This stops motion but won't kill force_mode the way stopl will
    local p0 = get_actual_tcp_pose()
    movel(p0, a = grind_accel_mpss, v = grind_speed_mps)
  
    #local p0a = get_target_tcp_pose()
    #global pattern_dist1 = pose_dist(p0a, p0)
  
    #local p0b = get_actual_tcp_pose()
    #global pattern_dist2 = pose_dist(p0b, p0)
  end
  
  ######################################################################################
  ######################################################################################
  ######################################################################################
  #
  # PATTERN GRINDING FUNCTIONS
  #
  
  ######################################################################################
  # LINE PATTERNS
  #
  
  # Move along a flat line dx_m x dy_m centered on p_center. Repeat n_cycles times.
  # Move in x direction first, then y
  def pattern_line_flat(p_center, dx_m, dy_m, n_cycles):
    local dp1 = p[-dx_m / 2.0, -dy_m / 2.0, 0, 0, 0, 0]
    local dp2 = p[dx_m / 2.0, dy_m / 2.0, 0, 0, 0, 0]
    local t_move = sqrt(dx_m * dx_m + dy_m * dy_m) / grind_speed_mps
    local dp_dest = dp2
  
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_accel_mpss, v = grind_speed_mps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp_dest, a = grind_accel_mpss, v = grind_speed_mps, t = t_move, r = grind_blend_radius_m)
  
      # Alternate directions for multiple cycles
      if dp_dest == dp1:
        dp_dest = dp2
      else:
        dp_dest = dp1
      end
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a cylindrical line dx_mm,drx_rad centered on p_center. Repeat n_cycles times.
  # Move in x direction first, then rx
  def pattern_line_cylinder(p_center, dx_m, drx_rad, speed_factor, n_cycles):
    dp1 = p[-dx_m / 2.0, 0, 0, -drx_rad / 2.0, 0, 0]
    dp2 = p[dx_m / 2.0, 0, 0, drx_rad / 2.0, 0, 0]
    t_move = sqrt(pow(dx_m / grind_speed_mps, 2) + pow(drx_rad / grind_rot_speed_rps / 4, 2))
    local dp_dest = dp2
  
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_accel_mpss * speed_factor, v = grind_speed_mps * speed_factor)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp_dest, a = grind_accel_mpss * speed_factor, v = grind_speed_mps * speed_factor, t = t_move, r = grind_blend_radius_m * speed_factor)
  
      # Alternate directions for multiple cycles
      if dp_dest == dp1:
        dp_dest = dp2
      else:
        dp_dest = dp1
      end
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a spherical line drx_rad,dry_rad centered on p_center. Repeat n_cycles times.
  # Move in rx direction first, then ry
  def pattern_line_sphere(p_center, drx_rad, dry_rad, n_cycles):
    dp1 = p[0, 0, 0, -drx_rad / 2.0, -dry_rad / 2.0, 0]
    dp2 = p[0, 0, 0, drx_rad / 2.0, dry_rad / 2.0, 0]
    t_move = sqrt(drx_rad * drx_rad + dry_rad * dry_rad) / grind_rot_speed_rps / 4
    local dp_dest = dp2
  
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp_dest, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move, r = grind_rot_blend_radius_rad)
  
      # Alternate directions for multiple cycles
      if dp_dest == dp1:
        dp_dest = dp2
      else:
        dp_dest = dp1
      end
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  
  ######################################################################################
  # RECT PATTERNS
  #
  
  # Move along a flat rect dx_m x dy_m centered on p_center. Repeat n_cycles times.
  # Move in x direction first, then y
  def pattern_rect_flat(p_center, dx_m, dy_m, n_cycles):
    local t_move_x = dx_m / grind_speed_mps
    local t_move_y = dy_m / grind_speed_mps
  
    local x2 = dx_m / 2.0
    local y2 = dy_m / 2.0
  
    local dp1 = p[-x2, -y2, 0, 0, 0, 0]
    local dp2 = p[x2, -y2, 0, 0, 0, 0]
    local dp3 = p[x2, y2, 0, 0, 0, 0]
    local dp4 = p[-x2, y2, 0, 0, 0, 0]
  
    global grind_cycle = 1
  
    grind_movel_start(p_center, dp1, a = grind_accel_mpss, v = grind_speed_mps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp2, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x, r = grind_blend_radius_m)
      grind_movel(dp3, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_y, r = grind_blend_radius_m)
      grind_movel(dp4, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x, r = grind_blend_radius_m)
      grind_movel(dp1, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_y, r = grind_blend_radius_m)
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a cylindrical rect dx_mm,drx_rad centered on p_center. Repeat n_cycles times.
  # Move in x direction first, then rx
  def pattern_rect_cylinder(p_center, dx_m, drx_rad, n_cycles):
    local t_move_x = dx_m / grind_speed_mps
    local t_move_rx = drx_rad / grind_rot_speed_rps / 4
    local x2 = dx_m / 2.0
    local rx2 = drx_rad / 2.0
  
    local dp1 = p[-x2, 0, 0, -rx2, 0, 0]
    local dp2 = p[x2, 0, 0, -rx2, 0, 0]
    local dp3 = p[x2, 0, 0, rx2, 0, 0]
    local dp4 = p[-x2, 0, 0, rx2, 0, 0]
  
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_accel_mpss, v = grind_speed_mps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp2, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x, r = grind_blend_radius_m)
      grind_movel(dp3, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx, r = grind_rot_blend_radius_rad)
      grind_movel(dp4, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x, r = grind_blend_radius_m)
      grind_movel(dp1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx, r = grind_rot_blend_radius_rad)
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a spherical rect drx_rad,dry_rad centered on p_center. Repeat n_cycles times.
  # Move in rx direction first, then ry
  def pattern_rect_sphere(p_center, drx_rad, dry_rad, n_cycles):
    local t_move_rx = drx_rad / grind_rot_speed_rps / 4
    local t_move_ry = dry_rad / grind_rot_speed_rps / 4
    local rx2 = drx_rad / 2.0
    local ry2 = dry_rad / 2.0
  
    local dp1 = p[0, 0, 0, -rx2, -ry2, 0]
    local dp2 = p[0, 0, 0, rx2, -ry2, 0]
    local dp3 = p[0, 0, 0, rx2, ry2, 0]
    local dp4 = p[0, 0, 0, -rx2, ry2, 0]
  
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
  
      grind_movel(dp2, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx, r = grind_rot_blend_radius_rad)
      grind_movel(dp3, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_ry, r = grind_rot_blend_radius_rad)
      grind_movel(dp4, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx, r = grind_rot_blend_radius_rad)
      grind_movel(dp1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_ry, r = grind_rot_blend_radius_rad)
  
      grind_cycle = grind_cycle + 1
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  
  ######################################################################################
  # SERPENTINE PATTERNS
  #
  
  # Move along a flat serpentine dx_m,dy_m in n_xsteps,n_ysteps centered on p_center. Repeat n_cycles times.
  # Move in direction of whichever nsteps is 1 first
  def pattern_serpentine_flat(p_center, dx_m, dy_m, n_xsteps, n_ysteps, n_cycles):
    local t_move_x = dx_m / grind_speed_mps
    local t_move_y = dy_m / grind_speed_mps
  
    # Bottom left corner, grid 0,0
    local x2 = dx_m / 2.0
    local y2 = dy_m / 2.0
    local dp1 = p[-x2, -y2, 0, 0, 0, 0]
  
  
    # Track our grid square number... we're in [0,0] and moving [+1,+1] in either x or y
    local x_grid = 0
    local y_grid = 0
    local x_incr = 1
    local y_incr = 1
    local grid_dx_m = dx_m / n_xsteps
    local grid_dy_m = dy_m / n_ysteps
  
    # How many moves does it take to complete a pass?
    global n_moves_per_pass = (n_xsteps + n_ysteps) * 2 - 1
  
    local move_count = 0
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_accel_mpss, v = grind_speed_mps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      # This will repeat for each leg of the serpentine!
      socket_set_var("grind_cycle", grind_cycle)
  
      # Skip first X move if we should start with a y move
      if grind_cycle != 1 or move_count != 0 or n_xsteps == 1:
        # Advance x_grid by x_incr
        x_grid = x_grid + x_incr
  
        # Move to the corresponding position
        local dp2 = p[x_grid * grid_dx_m - x2, y_grid * grid_dy_m - y2, 0, 0, 0, 0]
        grind_movel(dp2, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x / n_xsteps, r = grind_blend_radius_m)
  
        # Adjust x direction
        if x_grid >= n_xsteps:
          x_incr = -1
        elif x_grid <= 0:
          x_incr = 1
        end
        move_count = move_count + 1
      end
  
      if ok_to_proceed() and move_count < n_moves_per_pass:
        # Advance y_grid by y_incr
        y_grid = y_grid + y_incr
  
        # Move to the corresponding position
        local dp2 = p[x_grid * grid_dx_m - x2, y_grid * grid_dy_m - y2, 0, 0, 0, 0]
        grind_movel(dp2, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x / n_ysteps, r = grind_blend_radius_m)
  
        # Adjust y direction
        if y_grid >= n_ysteps:
          y_incr = -1
        elif y_grid <= 0:
          y_incr = 1
        end
        move_count = move_count + 1
      end
  
      # Detect when we've covered all the grid squares!
      if move_count >= n_moves_per_pass:
        grind_cycle = grind_cycle + 1
        move_count = 0
      end
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a cylindrical serpentine dx_m,drx_rad in n_xsteps,n_rxsteps centered on p_center. Repeat n_cycles times.
  # Move in direction of whichever nsteps is 1 first
  def pattern_serpentine_cylinder(p_center, dx_m, drx_rad, n_xsteps, n_rxsteps, n_cycles):
    local t_move_x = dx_m / grind_speed_mps
    local t_move_rx = drx_rad / grind_rot_speed_rps / 4
  
    # Bottom left corner, grid 0,0
    local x2 = dx_m / 2.0
    local rx2 = drx_rad / 2.0
    local dp1 = p[-x2, 0, 0, -rx2, 0, 0]
  
    # Track our grid square number... we're in [0,0] and moving [+1,+1] in either x or y
    local x_grid = 0
    local y_grid = 0
    local x_incr = 1
    local y_incr = 1
    local grid_dx_m = dx_m / n_xsteps
    local grid_drx_rad = drx_rad / n_rxsteps
  
    # How many moves does it take to complete a pass?
    global n_moves_per_pass = (n_xsteps + n_rxsteps) * 2 - 1
  
    local move_count = 0
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_accel_mpss, v = grind_speed_mps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      # This will repeat for each leg of the serpentine!
      socket_set_var("grind_cycle", grind_cycle)
  
      # Skip first X move if we should start with a y move
      if grind_cycle != 1 or move_count != 0 or n_xsteps == 1:
        # Advance x_grid by x_incr
        x_grid = x_grid + x_incr
  
        # Move to the corresponding position
        local dp2 = p[x_grid * grid_dx_m - x2, 0, 0, y_grid * grid_drx_rad - rx2, 0, 0]
        grind_movel(dp2, a = grind_accel_mpss, v = grind_speed_mps, t = t_move_x / n_xsteps, r = grind_blend_radius_m)
  
        # Adjust x direction
        if x_grid >= n_xsteps:
          x_incr = -1
        elif x_grid <= 0:
          x_incr = 1
        end
        move_count = move_count + 1
      end
  
      if ok_to_proceed() and move_count < n_moves_per_pass:
        # Advance y_grid by y_incr
        y_grid = y_grid + y_incr
  
        # Move to the corresponding position
        local dp2 = p[x_grid * grid_dx_m - x2, 0, 0, y_grid * grid_drx_rad - rx2, 0, 0]
        grind_movel(dp2, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx / n_rxsteps, r = grind_rot_blend_radius_rad)
  
        # Adjust y direction
        if y_grid >= n_rxsteps:
          y_incr = -1
        elif y_grid <= 0:
          y_incr = 1
        end
        move_count = move_count + 1
      end
  
      # Detect when we've covered all the grid squares!
      if move_count >= n_moves_per_pass:
        grind_cycle = grind_cycle + 1
        move_count = 0
      end
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  # Move along a sperical serpentine drx_rad,dry_rad in n_rxsteps,n_rysteps centered on p_center. Repeat n_cycles times.
  # Move in direction of whichever nsteps is 1 first
  def pattern_serpentine_sphere(p_center, drx_rad, dry_rad, n_rxsteps, n_rysteps, n_cycles):
    local t_move_rx = drx_rad / grind_rot_speed_rps / 4
    local t_move_ry = dry_rad / grind_rot_speed_rps / 4
  
    # Bottom left corner, grid 0,0
    local rx2 = drx_rad / 2.0
    local ry2 = dry_rad / 2.0
    local dp1 = p[0, 0, 0, -rx2, -ry2, 0]
  
    # Track our grid square number... we're in [0,0] and moving [+1,+1] in either x or y
    local x_grid = 0
    local y_grid = 0
    local x_incr = 1
    local y_incr = 1
    local grid_drx_rad = drx_rad / n_rxsteps
    local grid_dry_rad = dry_rad / n_rysteps
  
    # How many moves does it take to complete a pass?
    global n_moves_per_pass = (n_rxsteps + n_rysteps) * 2 - 1
  
    local move_count = 0
    global grind_cycle = 1
    grind_movel_start(p_center, dp1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps)
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      # This will repeat for each leg of the serpentine!
      socket_set_var("grind_cycle", grind_cycle)
  
      # Skip first X move if we should start with a y move
      if grind_cycle != 1 or move_count != 0 or n_rxsteps == 1:
        # Advance x_grid by x_incr
        x_grid = x_grid + x_incr
  
        # Move to the corresponding position
        local dp2 = p[0, 0, 0, x_grid * grid_drx_rad - rx2, y_grid * grid_dry_rad - ry2, 0]
        grind_movel(dp2, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_rx / n_rxsteps, r = grind_rot_blend_radius_rad)
  
        # Adjust x direction
        if x_grid >= n_rxsteps:
          x_incr = -1
        elif x_grid <= 0:
          x_incr = 1
        end
        move_count = move_count + 1
      end
  
      if ok_to_proceed() and move_count < n_moves_per_pass:
        # Advance y_grid by y_incr
        y_grid = y_grid + y_incr
  
        # Move to the corresponding position
        local dp2 = p[0, 0, 0, x_grid * grid_drx_rad - rx2, y_grid * grid_dry_rad - ry2, 0]
        grind_movel(dp2, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, t = t_move_ry / n_rysteps, r = grind_rot_blend_radius_rad)
  
        # Adjust y direction
        if y_grid >= n_rysteps:
          y_incr = -1
        elif y_grid <= 0:
          y_incr = 1
        end
        move_count = move_count + 1
      end
  
      # Detect when we've covered all the grid squares!
      if move_count >= n_moves_per_pass:
        grind_cycle = grind_cycle + 1
        move_count = 0
      end
    end
    grind_movel_finish()
    pattern_complete()
  end
  
  
  ######################################################################################
  # CIRCULAR PATTERNS
  #
  
  # What is a good number of points to use for a circular pattern?
  def recommend_npoints(diam_m, blend_radius_m):
    circum_m = diam_m * MATH_PI
    if blend_radius_m > 0:
      # How many blend_radii to cover the circumference
      n_points = ceil(circum_m / blend_radius_m)
    else:
      # Blend radius is 0... model would be 10 points for a 10mm diameter (1000 points for 1m diameter!)
      n_points = ceil(diam_m * 1000.0)
    end
    return limiter(n_points, 1, 1000)
  end
  
  # Grind along a flat circle circle_diam_m centered on p_center. Repeat n_cycles times.
  def pattern_circle_flat(p_center, circle_diam_m, n_cycles):
  
    # Local calculations
    n_points = recommend_npoints(circle_diam_m, grind_blend_radius_m)
    circle_radius_m = circle_diam_m / 2.0
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      i = 0
      while ok_to_proceed() and i <= n_points:
        theta = d2r(180.0 + 360.0 * i / n_points)
        x = circle_radius_m * cos(theta)
        y = circle_radius_m * sin(theta)
  
        p1 = pose_trans(p_center, p[x, y, 0, 0, 0, 0])
        movel(p1, a = grind_accel_mpss, v = grind_speed_mps, r = grind_blend_radius_m)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
    end
    pattern_complete()
  end
  
  # Move along a cylindrical circle circle_diam_m on a cylinder_diam_m object starting at the current tool position. Repeat n_cycles times.
  def pattern_circle_cylinder(p_center, circle_diam_m, cylinder_radius_m, n_cycles):
  
    # Local calculations
    n_points = recommend_npoints(circle_diam_m, grind_blend_radius_m)
    circle_radius_m = circle_diam_m / 2.0
    speed_factor = 0.5 / (robot_part_geometry[1] / 1000.0)
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      i = 0
      while ok_to_proceed() and i <= n_points:
        theta = d2r(180.0 + 360.0 * i / n_points)
        x = circle_radius_m * cos(theta)
        y = circle_radius_m * sin(theta)
        rx = 2.0 * y / cylinder_radius_m
  
        p1 = pose_trans(p_center, p[x, 0, 0, rx, 0, 0])
        # Speed_factor needs to be applied when running radially, and needs to be 1.0 when running laterally. This smooths it all the way around!
        global this_speed_factor = (speed_factor - 1) * abs(cos(theta)) + 1.0
        movel(p1, a = grind_accel_mpss * this_speed_factor, v = grind_speed_mps * this_speed_factor, r = grind_blend_radius_m)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
    end
    pattern_complete()
  end
  
  # Move along a spherical circle circle_diam_m on a sphere_diam_m object starting at the current tool position. Repeat n_cycles times.
  def pattern_circle_sphere(p_center, circle_diam_m, sphere_diam_m, n_cycles):
    # Local calculations
    n_points = recommend_npoints(circle_diam_m, grind_blend_radius_m)
    circle_radius_m = circle_diam_m / 2.0
    sphere_radius_m = sphere_diam_m / 2.0
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      i = 0
      while ok_to_proceed() and i <= n_points:
        theta = d2r(180.0 + 360.0 * i / n_points)
        x = circle_radius_m * cos(theta)
        rx = x / sphere_radius_m
        y = circle_radius_m * sin(theta)
        ry = y / sphere_radius_m
  
        p1 = pose_trans(p_center, p[0, 0, 0, rx, ry, 0])
        movel(p1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, r = grind_rot_blend_radius_rad)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
    end
    pattern_complete()
  end
  
  
  ######################################################################################
  # SPIRAL PATTERNS
  #
  
  def pattern_spiral_flat(p_center, circle1_diam_m, circle2_diam_m, n_spirals, n_cycles):
    # Local calculations
    max_diam_m = max(circle1_diam_m, circle2_diam_m)
    n_points = recommend_npoints(max_diam_m, grind_blend_radius_m)
    n_total_points = n_spirals * n_points
    circle1_radius_m = circle1_diam_m / 2.0
    circle2_radius_m = circle2_diam_m / 2.0
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      rslope = (circle2_radius_m - circle1_radius_m) / n_total_points
      i = 0
      while ok_to_proceed() and i <= n_total_points:
        theta = d2r(180.0 + 360.0 * (i % n_points) / n_points)
        r_instantaneous = i * rslope + circle1_radius_m
        x = r_instantaneous * cos(theta)
        y = r_instantaneous * sin(theta)
  
        p1 = pose_trans(p_center, p[x, y, 0, 0, 0, 0])
        movel(p1, a = grind_accel_mpss, v = grind_speed_mps, r = grind_blend_radius_m)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
      # Next cycle- swap diameters so we go in/out/in etc.
      old_circle1_radius_m = circle1_radius_m
      circle1_radius_m = circle2_radius_m
      circle2_radius_m = old_circle1_radius_m
    end
    pattern_complete()
  end
  
  def pattern_spiral_cylinder(p_center, circle1_diam_m, circle2_diam_m, n_spirals, cylinder_radius_m, n_cycles):
    # Local calculations
    max_diam_m = max(circle1_diam_m, circle2_diam_m)
    n_points = recommend_npoints(max_diam_m, grind_blend_radius_m)
    n_total_points = n_spirals * n_points
    circle1_radius_m = circle1_diam_m / 2.0
    circle2_radius_m = circle2_diam_m / 2.0
    speed_factor = 0.5 / (robot_part_geometry[1] / 1000.0)
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      rslope = (circle2_radius_m - circle1_radius_m) / n_total_points
      i = 0
      while ok_to_proceed() and i <= n_total_points:
        theta = d2r(180.0 + 360.0 * (i % n_points) / n_points)
        r_instantaneous = i * rslope + circle1_radius_m
        x = r_instantaneous * cos(theta)
        y = r_instantaneous * sin(theta)
        rx = 2.0 * y / cylinder_radius_m
  
        p1 = pose_trans(p_center, p[x, 0, 0, rx, 0, 0])
  
        # Speed_factor needs to be applied when running radially, and needs to be 1.0 when running laterally. This smooths it all the way around!
        global this_speed_factor = (speed_factor - 1) * abs(cos(theta)) + 1.0
        movel(p1, a = grind_accel_mpss * this_speed_factor, v = grind_speed_mps * this_speed_factor, r = grind_blend_radius_m)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
      # Next cycle- swap diameters so we go in/out/in etc.
      old_circle1_radius_m = circle1_radius_m
      circle1_radius_m = circle2_radius_m
      circle2_radius_m = old_circle1_radius_m
    end
    pattern_complete()
  end
  
  def pattern_spiral_sphere(p_center, circle1_diam_m, circle2_diam_m, n_spirals, sphere_diam_m, n_cycles):
    # Local calculations
    max_diam_m = max(circle1_diam_m, circle2_diam_m)
    n_points = recommend_npoints(max_diam_m, grind_blend_radius_m)
    n_total_points = n_spirals * n_points
    circle1_radius_m = circle1_diam_m / 2.0
    circle2_radius_m = circle2_diam_m / 2.0
    sphere_radius_m = sphere_diam_m / 2.0
  
    global grind_cycle = 1
    while (ok_to_proceed() and grind_cycle <= n_cycles):
      socket_set_var("grind_cycle", grind_cycle)
      rslope = (circle2_radius_m - circle1_radius_m) / n_total_points
      i = 0
      while ok_to_proceed() and i <= n_total_points:
        theta = d2r(180.0 + 360.0 * (i % n_points) / n_points)
        r_instantaneous = i * rslope + circle1_radius_m
        x = r_instantaneous * cos(theta)
        rx = x / sphere_radius_m
        y = r_instantaneous * sin(theta)
        ry = y / sphere_radius_m
  
        p1 = pose_trans(p_center, p[0, 0, 0, rx, ry, 0])
        movel(p1, a = grind_rot_accel_rpss, v = grind_rot_speed_rps, r = grind_rot_blend_radius_rad)
        i = i + 1
      end
  
      grind_cycle = grind_cycle + 1
      # Next cycle- swap diameters so we go in/out/in etc.
      old_circle1_radius_m = circle1_radius_m
      circle1_radius_m = circle2_radius_m
      circle2_radius_m = old_circle1_radius_m
    end
    pattern_complete()
  end
  $ 5 "currentTcpPose≔get_actual_tcp_pose()"
  global currentTcpPose= get_actual_tcp_pose ()
  $ 6 "MoveJ"
  $ 7 "currentTcpPose" "breakAfter"
  movej(currentTcpPose, a=1.3962634015954636, v=1.0471975511965976)
  $ 10 "socket_is_open≔ False "
  global socket_is_open=  False  
  while (True):
    $ 11 "Robot Program"
    $ 12 "Loop socket_is_open ≟  False "
    while (socket_is_open  ==    False  ):
      $ 13 "Wait: 0.25"
      sleep(0.25)
      $ 14 "socket_close()"
      socket_close()
      $ 15 "socket_is_open≔socket_open('169.254.254.200', 30000)"
      global socket_is_open=socket_open("169.254.254.200", 30000)
      $ 16 "If not socket_is_open"
      if (not socket_is_open):
        $ 17 "socket_is_open≔socket_open('169.254.254.210', 30000)"
        global socket_is_open=socket_open("169.254.254.210", 30000)
      end
      $ 18 "If not socket_is_open"
      if (not socket_is_open):
        $ 19 "socket_is_open≔socket_open('192.168.0.252', 30000)"
        global socket_is_open=socket_open("192.168.0.252", 30000)
      end
    end
    $ 20 "response≔'Unknown command'"
    global response="Unknown command"
    $ 21 "command≔socket_read_ascii_float(12)"
    global command=socket_read_ascii_float(12)
    $ 22 "If command_validate()"
    if (command_validate()):
      $ 23 "command_start()"
      command_start()
      $ 24 "Set Stacklight=On"
      set_standard_digital_out(0, True)
      $ 25 "Switch command[1]"
      switch_1 = command[1]
      $ 26 "Case 10"
      if (10 == switch_1):
        $ 27 "return_actual_tcp_pose()"
        return_actual_tcp_pose()
      elif (12 == switch_1):
        $ 28 "Case 12"
        $ 29 "return_tcp_offset()"
        return_tcp_offset()
      elif (13 == switch_1):
        $ 30 "Case 13"
        $ 31 "movel_relative_base(p[command[2], command[3], command[4], command[5], command[6], command[7]])"
        movel_relative_base(p[command[2], command[3], command[4], command[5], command[6], command[7]])
      elif (14 == switch_1):
        $ 32 "Case 14"
        $ 33 "movel_relative_tcp(p[command[2], command[3], command[4], command[5], command[6], command[7]])"
        movel_relative_tcp(p[command[2], command[3], command[4], command[5], command[6], command[7]])
      elif (15 == switch_1):
        $ 34 "Case 15"
        $ 35 "movel_relative_tcp_part(p[command[2], command[3], command[4], command[5], command[6], command[7]])"
        movel_relative_tcp_part(p[command[2], command[3], command[4], command[5], command[6], command[7]])
      elif (16 == switch_1):
        $ 36 "Case 16"
        $ 37 "movel_one_only(command[2],command[3])"
        movel_one_only(command[2],command[3])
      elif (18 == switch_1):
        $ 38 "Case 18"
        $ 39 "movel_rot_only(command[2],command[3],command[4])"
        movel_rot_only(command[2],command[3],command[4])
      elif (20 == switch_1):
        $ 40 "Case 20"
        $ 41 "return_get_actual_joint_positions()"
        return_get_actual_joint_positions()
      elif (21 == switch_1):
        $ 42 "Case 21"
        $ 43 "movej_ag([command[2], command[3], command[4], command[5], command[6], command[7]])"
        movej_ag([command[2], command[3], command[4], command[5], command[6], command[7]])
      elif (22 == switch_1):
        $ 44 "Case 22"
        $ 45 "movel_ag(p[command[2], command[3], command[4], command[5], command[6], command[7]])"
        movel_ag(p[command[2], command[3], command[4], command[5], command[6], command[7]])
      elif (25 == switch_1):
        $ 46 "Case 25"
        $ 47 "return_both_positions()"
        return_both_positions()
      elif (30 == switch_1):
        $ 48 "Case 30"
        $ 49 "set_variable()"
        set_variable()
      elif (35 == switch_1):
        $ 50 "Case 35"
        $ 51 "set_grind_variable()"
        set_grind_variable()
      elif (40 == switch_1):
        $ 52 "Case 40"
        $ 53 "grind()"
        grind()
      elif (50 == switch_1):
        $ 54 "Case 50"
        $ 55 "Call AG_50"
        AG_50()
      elif (98 == switch_1):
        $ 56 "Case 98"
        $ 57 "response≔'socket reset'"
        global response="socket reset"
      elif (99 == switch_1):
        $ 58 "Case 99"
        $ 59 "response≔'exiting'"
        global response="exiting"
      else:
        $ 60 "Default Case"
        $ 61 "response≔'unknown command'"
        global response="unknown command"
      end
      $ 62 "command_finish()"
      command_finish()
      $ 63 "Set Stacklight=Off"
      set_standard_digital_out(0, False)
      $ 64 "If command[1]≟98"
      if (command[1] == 98):
        $ 65 "Wait: 0.5"
        sleep(0.5)
        $ 66 "socket_close()"
        socket_close()
        $ 67 "socket_is_open≔ False "
        global socket_is_open=  False  
      end
      $ 68 "If command[1]≟99"
      if (command[1] == 99):
        $ 69 "Wait: 0.5"
        sleep(0.5)
        $ 70 "socket_close()"
        socket_close()
        $ 71 "socket_is_open≔ False "
        global socket_is_open=  False  
        $ 72 "Halt"
        halt
      end
    else:
      $ 73 "Else" "noBreak"
      $ 74 "no_command()"
      no_command()
    end
  end
end
